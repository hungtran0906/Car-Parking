
AutomatedSmartParkingProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002424  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08002554  08002554  00003554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026c4  080026c4  00004004  2**0
                  CONTENTS
  4 .ARM          00000008  080026c4  080026c4  000036c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080026cc  080026cc  00004004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026cc  080026cc  000036cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026d0  080026d0  000036d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080026d4  00004000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000004  080026d8  00004004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  080026d8  00004090  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002bc9  00000000  00000000  0000402d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e5e  00000000  00000000  00006bf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00001136  00000000  00000000  00007a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002e0  00000000  00000000  00008b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000218  00000000  00000000  00008e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003275  00000000  00000000  00009088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005234  00000000  00000000  0000c2fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000ac54  00000000  00000000  00011531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001c185  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000008f8  00000000  00000000  0001c1c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  0001cac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_rnglists 00000019  00000000  00000000  0001cb0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	0800253c 	.word	0x0800253c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	0800253c 	.word	0x0800253c

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <KPD_init>:




ES_t KPD_init()
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0


	// Rows

	// R1 output push pull mode
	PinCfg.GPIO_PinNumber = KPD_U8_R1;
 800018a:	2301      	movs	r3, #1
 800018c:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 800018e:	2304      	movs	r3, #4
 8000190:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ;
 8000192:	2302      	movs	r3, #2
 8000194:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KPD_U8_PORTROWS, &PinCfg);
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	4619      	mov	r1, r3
 800019a:	482c      	ldr	r0, [pc, #176]	@ (800024c <KPD_init+0xc8>)
 800019c:	f001 fe4e 	bl	8001e3c <MCAL_GPIO_Init>

	// R2 output push pull mode
	PinCfg.GPIO_PinNumber = KPD_U8_R2;
 80001a0:	2302      	movs	r3, #2
 80001a2:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 80001a4:	2304      	movs	r3, #4
 80001a6:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ;
 80001a8:	2302      	movs	r3, #2
 80001aa:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KPD_U8_PORTROWS, &PinCfg);
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	4619      	mov	r1, r3
 80001b0:	4826      	ldr	r0, [pc, #152]	@ (800024c <KPD_init+0xc8>)
 80001b2:	f001 fe43 	bl	8001e3c <MCAL_GPIO_Init>

	// R3 output push pull mode
	PinCfg.GPIO_PinNumber = KPD_U8_R3;
 80001b6:	2308      	movs	r3, #8
 80001b8:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 80001ba:	2304      	movs	r3, #4
 80001bc:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ;
 80001be:	2302      	movs	r3, #2
 80001c0:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KPD_U8_PORTROWS, &PinCfg);
 80001c2:	1d3b      	adds	r3, r7, #4
 80001c4:	4619      	mov	r1, r3
 80001c6:	4821      	ldr	r0, [pc, #132]	@ (800024c <KPD_init+0xc8>)
 80001c8:	f001 fe38 	bl	8001e3c <MCAL_GPIO_Init>

	// R4 output push pull mode
	PinCfg.GPIO_PinNumber = KPD_U8_R4;
 80001cc:	2310      	movs	r3, #16
 80001ce:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 80001d0:	2304      	movs	r3, #4
 80001d2:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ;
 80001d4:	2302      	movs	r3, #2
 80001d6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KPD_U8_PORTROWS, &PinCfg);
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	4619      	mov	r1, r3
 80001dc:	481b      	ldr	r0, [pc, #108]	@ (800024c <KPD_init+0xc8>)
 80001de:	f001 fe2d 	bl	8001e3c <MCAL_GPIO_Init>


	// Columns

	// C1 input pull down mode
	PinCfg.GPIO_PinNumber = KPD_U8_C1;
 80001e2:	2380      	movs	r3, #128	@ 0x80
 80001e4:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_PULLDOWN;
 80001e6:	2303      	movs	r3, #3
 80001e8:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(KPD_U8_PORTCOLS, &PinCfg);
 80001ea:	1d3b      	adds	r3, r7, #4
 80001ec:	4619      	mov	r1, r3
 80001ee:	4817      	ldr	r0, [pc, #92]	@ (800024c <KPD_init+0xc8>)
 80001f0:	f001 fe24 	bl	8001e3c <MCAL_GPIO_Init>

	// C2 input pull down mode
	PinCfg.GPIO_PinNumber = KPD_U8_C2;
 80001f4:	2340      	movs	r3, #64	@ 0x40
 80001f6:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_PULLDOWN;
 80001f8:	2303      	movs	r3, #3
 80001fa:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(KPD_U8_PORTCOLS, &PinCfg);
 80001fc:	1d3b      	adds	r3, r7, #4
 80001fe:	4619      	mov	r1, r3
 8000200:	4812      	ldr	r0, [pc, #72]	@ (800024c <KPD_init+0xc8>)
 8000202:	f001 fe1b 	bl	8001e3c <MCAL_GPIO_Init>

	// C3 input pull down mode
	PinCfg.GPIO_PinNumber = KPD_U8_C3;
 8000206:	2320      	movs	r3, #32
 8000208:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_PULLDOWN;
 800020a:	2303      	movs	r3, #3
 800020c:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(KPD_U8_PORTCOLS, &PinCfg);
 800020e:	1d3b      	adds	r3, r7, #4
 8000210:	4619      	mov	r1, r3
 8000212:	480e      	ldr	r0, [pc, #56]	@ (800024c <KPD_init+0xc8>)
 8000214:	f001 fe12 	bl	8001e3c <MCAL_GPIO_Init>


	MCAL_GPIO_WritePin(KPD_U8_PORTROWS, KPD_U8_R1, GPIO_PIN_LOW);
 8000218:	2200      	movs	r2, #0
 800021a:	2101      	movs	r1, #1
 800021c:	480b      	ldr	r0, [pc, #44]	@ (800024c <KPD_init+0xc8>)
 800021e:	f001 fea3 	bl	8001f68 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KPD_U8_PORTROWS, KPD_U8_R2, GPIO_PIN_LOW);
 8000222:	2200      	movs	r2, #0
 8000224:	2102      	movs	r1, #2
 8000226:	4809      	ldr	r0, [pc, #36]	@ (800024c <KPD_init+0xc8>)
 8000228:	f001 fe9e 	bl	8001f68 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KPD_U8_PORTROWS, KPD_U8_R3, GPIO_PIN_LOW);
 800022c:	2200      	movs	r2, #0
 800022e:	2108      	movs	r1, #8
 8000230:	4806      	ldr	r0, [pc, #24]	@ (800024c <KPD_init+0xc8>)
 8000232:	f001 fe99 	bl	8001f68 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KPD_U8_PORTROWS, KPD_U8_R4, GPIO_PIN_LOW);
 8000236:	2200      	movs	r2, #0
 8000238:	2110      	movs	r1, #16
 800023a:	4804      	ldr	r0, [pc, #16]	@ (800024c <KPD_init+0xc8>)
 800023c:	f001 fe94 	bl	8001f68 <MCAL_GPIO_WritePin>



	return ES_OK;
 8000240:	2300      	movs	r3, #0
}
 8000242:	4618      	mov	r0, r3
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40010c00 	.word	0x40010c00

08000250 <KPD_ES_tGetKeyPressed>:


// -------------------------------------------------------------------------------------------- //

ES_t KPD_ES_tGetKeyPressed(uint8_t *copy_pu8ReturnedKey)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	22ff      	movs	r2, #255	@ 0xff
 800025c:	701a      	strb	r2, [r3, #0]
	uint8_t Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = GPIO_PIN_HIGH;
 800025e:	2301      	movs	r3, #1
 8000260:	733b      	strb	r3, [r7, #12]
	if(copy_pu8ReturnedKey != NULL)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2b00      	cmp	r3, #0
 8000266:	d058      	beq.n	800031a <KPD_ES_tGetKeyPressed+0xca>
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
 8000268:	2300      	movs	r3, #0
 800026a:	73fb      	strb	r3, [r7, #15]
 800026c:	e051      	b.n	8000312 <KPD_ES_tGetKeyPressed+0xc2>
		{
			// Activate row
			MCAL_GPIO_WritePin(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],GPIO_PIN_HIGH);
 800026e:	7bfb      	ldrb	r3, [r7, #15]
 8000270:	4a2e      	ldr	r2, [pc, #184]	@ (800032c <KPD_ES_tGetKeyPressed+0xdc>)
 8000272:	5cd3      	ldrb	r3, [r2, r3]
 8000274:	2201      	movs	r2, #1
 8000276:	4619      	mov	r1, r3
 8000278:	482d      	ldr	r0, [pc, #180]	@ (8000330 <KPD_ES_tGetKeyPressed+0xe0>)
 800027a:	f001 fe75 	bl	8001f68 <MCAL_GPIO_WritePin>
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
 800027e:	2300      	movs	r3, #0
 8000280:	73bb      	strb	r3, [r7, #14]
 8000282:	e035      	b.n	80002f0 <KPD_ES_tGetKeyPressed+0xa0>
			{
				Local_u8PinVal = MCAL_GPIO_ReadPin(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter]);
 8000284:	7bbb      	ldrb	r3, [r7, #14]
 8000286:	4a2b      	ldr	r2, [pc, #172]	@ (8000334 <KPD_ES_tGetKeyPressed+0xe4>)
 8000288:	5cd3      	ldrb	r3, [r2, r3]
 800028a:	4619      	mov	r1, r3
 800028c:	4828      	ldr	r0, [pc, #160]	@ (8000330 <KPD_ES_tGetKeyPressed+0xe0>)
 800028e:	f001 fe54 	bl	8001f3a <MCAL_GPIO_ReadPin>
 8000292:	4603      	mov	r3, r0
 8000294:	737b      	strb	r3, [r7, #13]
				if(Local_u8PinVal == GPIO_PIN_HIGH){ /* Switch is pressed */
 8000296:	7b7b      	ldrb	r3, [r7, #13]
 8000298:	2b01      	cmp	r3, #1
 800029a:	d126      	bne.n	80002ea <KPD_ES_tGetKeyPressed+0x9a>
					/* The switch which reaches between the activated
					 * Column and the pressed key */
					wait_ms(20);   // Debouncing
 800029c:	2014      	movs	r0, #20
 800029e:	f000 f95d 	bl	800055c <wait_ms>
					// Check if the pin is still low "problem of multiple display"
					Local_u8PinVal = MCAL_GPIO_ReadPin(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter]);  // Update the PinVal
 80002a2:	7bbb      	ldrb	r3, [r7, #14]
 80002a4:	4a23      	ldr	r2, [pc, #140]	@ (8000334 <KPD_ES_tGetKeyPressed+0xe4>)
 80002a6:	5cd3      	ldrb	r3, [r2, r3]
 80002a8:	4619      	mov	r1, r3
 80002aa:	4821      	ldr	r0, [pc, #132]	@ (8000330 <KPD_ES_tGetKeyPressed+0xe0>)
 80002ac:	f001 fe45 	bl	8001f3a <MCAL_GPIO_ReadPin>
 80002b0:	4603      	mov	r3, r0
 80002b2:	737b      	strb	r3, [r7, #13]
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == GPIO_PIN_HIGH){
 80002b4:	e008      	b.n	80002c8 <KPD_ES_tGetKeyPressed+0x78>
						// Continues reading until the value equals high
						Local_u8PinVal = MCAL_GPIO_ReadPin(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter]);   // Update the PinVal
 80002b6:	7bbb      	ldrb	r3, [r7, #14]
 80002b8:	4a1e      	ldr	r2, [pc, #120]	@ (8000334 <KPD_ES_tGetKeyPressed+0xe4>)
 80002ba:	5cd3      	ldrb	r3, [r2, r3]
 80002bc:	4619      	mov	r1, r3
 80002be:	481c      	ldr	r0, [pc, #112]	@ (8000330 <KPD_ES_tGetKeyPressed+0xe0>)
 80002c0:	f001 fe3b 	bl	8001f3a <MCAL_GPIO_ReadPin>
 80002c4:	4603      	mov	r3, r0
 80002c6:	737b      	strb	r3, [r7, #13]
					while(Local_u8PinVal == GPIO_PIN_HIGH){
 80002c8:	7b7b      	ldrb	r3, [r7, #13]
 80002ca:	2b01      	cmp	r3, #1
 80002cc:	d0f3      	beq.n	80002b6 <KPD_ES_tGetKeyPressed+0x66>
					}
					*copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
 80002ce:	7bfa      	ldrb	r2, [r7, #15]
 80002d0:	7bb9      	ldrb	r1, [r7, #14]
 80002d2:	4819      	ldr	r0, [pc, #100]	@ (8000338 <KPD_ES_tGetKeyPressed+0xe8>)
 80002d4:	4613      	mov	r3, r2
 80002d6:	005b      	lsls	r3, r3, #1
 80002d8:	4413      	add	r3, r2
 80002da:	4403      	add	r3, r0
 80002dc:	440b      	add	r3, r1
 80002de:	781a      	ldrb	r2, [r3, #0]
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	701a      	strb	r2, [r3, #0]
					Local_u8Flag = GPIO_PIN_LOW;
 80002e4:	2300      	movs	r3, #0
 80002e6:	733b      	strb	r3, [r7, #12]
					break;
 80002e8:	e005      	b.n	80002f6 <KPD_ES_tGetKeyPressed+0xa6>
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
 80002ea:	7bbb      	ldrb	r3, [r7, #14]
 80002ec:	3301      	adds	r3, #1
 80002ee:	73bb      	strb	r3, [r7, #14]
 80002f0:	7bbb      	ldrb	r3, [r7, #14]
 80002f2:	2b02      	cmp	r3, #2
 80002f4:	d9c6      	bls.n	8000284 <KPD_ES_tGetKeyPressed+0x34>
				}
			}
			// Deactivate ROW
			MCAL_GPIO_WritePin(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],GPIO_PIN_LOW);
 80002f6:	7bfb      	ldrb	r3, [r7, #15]
 80002f8:	4a0c      	ldr	r2, [pc, #48]	@ (800032c <KPD_ES_tGetKeyPressed+0xdc>)
 80002fa:	5cd3      	ldrb	r3, [r2, r3]
 80002fc:	2200      	movs	r2, #0
 80002fe:	4619      	mov	r1, r3
 8000300:	480b      	ldr	r0, [pc, #44]	@ (8000330 <KPD_ES_tGetKeyPressed+0xe0>)
 8000302:	f001 fe31 	bl	8001f68 <MCAL_GPIO_WritePin>
			if(Local_u8Flag == GPIO_PIN_LOW)
 8000306:	7b3b      	ldrb	r3, [r7, #12]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d008      	beq.n	800031e <KPD_ES_tGetKeyPressed+0xce>
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
 800030c:	7bfb      	ldrb	r3, [r7, #15]
 800030e:	3301      	adds	r3, #1
 8000310:	73fb      	strb	r3, [r7, #15]
 8000312:	7bfb      	ldrb	r3, [r7, #15]
 8000314:	2b03      	cmp	r3, #3
 8000316:	d9aa      	bls.n	800026e <KPD_ES_tGetKeyPressed+0x1e>
 8000318:	e002      	b.n	8000320 <KPD_ES_tGetKeyPressed+0xd0>
				break;
		}


	}else{
		return ES_NOT_OK;
 800031a:	2301      	movs	r3, #1
 800031c:	e001      	b.n	8000322 <KPD_ES_tGetKeyPressed+0xd2>
				break;
 800031e:	bf00      	nop
	}
	return ES_OK;
 8000320:	2300      	movs	r3, #0
}
 8000322:	4618      	mov	r0, r3
 8000324:	3710      	adds	r7, #16
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	080026a4 	.word	0x080026a4
 8000330:	40010c00 	.word	0x40010c00
 8000334:	080026a8 	.word	0x080026a8
 8000338:	08002698 	.word	0x08002698

0800033c <LCD_ES_tTrigger_Enable>:
//ProtoType of static is defined in source file itself(Private declaration)
static ES_t LCD_ES_tTrigger_Enable(LCD_Instant instant);
static ES_t LCD_ES_tSet_Cursor_Pos(LCD_Instant instant,uint8_t row,uint8_t column);

//We make it static cuz we won't use it anywhere but here
static ES_t LCD_ES_tTrigger_Enable(LCD_Instant instant){
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	71fb      	strb	r3, [r7, #7]
	switch(instant){
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d002      	beq.n	8000352 <LCD_ES_tTrigger_Enable+0x16>
 800034c:	2b01      	cmp	r3, #1
 800034e:	d013      	beq.n	8000378 <LCD_ES_tTrigger_Enable+0x3c>
 8000350:	e023      	b.n	800039a <LCD_ES_tTrigger_Enable+0x5e>
	case LCD_Instant_1:
	{
		MCAL_GPIO_WritePin(LCD_1_CMD_PORT, EN_1, GPIO_PIN_HIGH);
 8000352:	2201      	movs	r2, #1
 8000354:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000358:	4812      	ldr	r0, [pc, #72]	@ (80003a4 <LCD_ES_tTrigger_Enable+0x68>)
 800035a:	f001 fe05 	bl	8001f68 <MCAL_GPIO_WritePin>
		wait_ms(1);
 800035e:	2001      	movs	r0, #1
 8000360:	f000 f8fc 	bl	800055c <wait_ms>
		MCAL_GPIO_WritePin(LCD_1_CMD_PORT, EN_1, GPIO_PIN_LOW);
 8000364:	2200      	movs	r2, #0
 8000366:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800036a:	480e      	ldr	r0, [pc, #56]	@ (80003a4 <LCD_ES_tTrigger_Enable+0x68>)
 800036c:	f001 fdfc 	bl	8001f68 <MCAL_GPIO_WritePin>
		wait_ms(2);
 8000370:	2002      	movs	r0, #2
 8000372:	f000 f8f3 	bl	800055c <wait_ms>
		break;
 8000376:	e010      	b.n	800039a <LCD_ES_tTrigger_Enable+0x5e>
	}
	case LCD_Instant_2:
	{
		MCAL_GPIO_WritePin(LCD_2_CMD_PORT, EN_2, GPIO_PIN_HIGH);
 8000378:	2201      	movs	r2, #1
 800037a:	2140      	movs	r1, #64	@ 0x40
 800037c:	480a      	ldr	r0, [pc, #40]	@ (80003a8 <LCD_ES_tTrigger_Enable+0x6c>)
 800037e:	f001 fdf3 	bl	8001f68 <MCAL_GPIO_WritePin>
		wait_ms(1);
 8000382:	2001      	movs	r0, #1
 8000384:	f000 f8ea 	bl	800055c <wait_ms>
		MCAL_GPIO_WritePin(LCD_2_CMD_PORT, EN_2, GPIO_PIN_LOW);
 8000388:	2200      	movs	r2, #0
 800038a:	2140      	movs	r1, #64	@ 0x40
 800038c:	4806      	ldr	r0, [pc, #24]	@ (80003a8 <LCD_ES_tTrigger_Enable+0x6c>)
 800038e:	f001 fdeb 	bl	8001f68 <MCAL_GPIO_WritePin>
		wait_ms(2);
 8000392:	2002      	movs	r0, #2
 8000394:	f000 f8e2 	bl	800055c <wait_ms>
		break;
 8000398:	bf00      	nop
	}
	}

	return ES_OK;
 800039a:	2300      	movs	r3, #0
}
 800039c:	4618      	mov	r0, r3
 800039e:	3708      	adds	r7, #8
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40010c00 	.word	0x40010c00
 80003a8:	40010800 	.word	0x40010800

080003ac <Lcd_ES_tInit>:


ES_t Lcd_ES_tInit(LCD_Instant instant){
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4603      	mov	r3, r0
 80003b4:	71fb      	strb	r3, [r7, #7]

	GPIO_PinConfig_t PinCfg;

	switch(instant){
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d002      	beq.n	80003c2 <Lcd_ES_tInit+0x16>
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d063      	beq.n	8000488 <Lcd_ES_tInit+0xdc>
 80003c0:	e0c3      	b.n	800054a <Lcd_ES_tInit+0x19e>
	{

		// Pins Configuration for LCD

		// RS output push pull mode
		PinCfg.GPIO_PinNumber = RS_1;
 80003c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80003c6:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 80003c8:	2304      	movs	r3, #4
 80003ca:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80003cc:	2301      	movs	r3, #1
 80003ce:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(LCD_1_CMD_PORT, &PinCfg);
 80003d0:	f107 030c 	add.w	r3, r7, #12
 80003d4:	4619      	mov	r1, r3
 80003d6:	485f      	ldr	r0, [pc, #380]	@ (8000554 <Lcd_ES_tInit+0x1a8>)
 80003d8:	f001 fd30 	bl	8001e3c <MCAL_GPIO_Init>

		// EN output push pull mode
		PinCfg.GPIO_PinNumber = EN_1;
 80003dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003e0:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 80003e2:	2304      	movs	r3, #4
 80003e4:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80003e6:	2301      	movs	r3, #1
 80003e8:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(LCD_1_CMD_PORT, &PinCfg);
 80003ea:	f107 030c 	add.w	r3, r7, #12
 80003ee:	4619      	mov	r1, r3
 80003f0:	4858      	ldr	r0, [pc, #352]	@ (8000554 <Lcd_ES_tInit+0x1a8>)
 80003f2:	f001 fd23 	bl	8001e3c <MCAL_GPIO_Init>

		// D4 output push pull mode
		PinCfg.GPIO_PinNumber = D4_1;
 80003f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003fa:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 80003fc:	2304      	movs	r3, #4
 80003fe:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000400:	2301      	movs	r3, #1
 8000402:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(LCD_1_DATA_PORT, &PinCfg);
 8000404:	f107 030c 	add.w	r3, r7, #12
 8000408:	4619      	mov	r1, r3
 800040a:	4852      	ldr	r0, [pc, #328]	@ (8000554 <Lcd_ES_tInit+0x1a8>)
 800040c:	f001 fd16 	bl	8001e3c <MCAL_GPIO_Init>

		// D5 output push pull mode
		PinCfg.GPIO_PinNumber = D5_1;
 8000410:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000414:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 8000416:	2304      	movs	r3, #4
 8000418:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 800041a:	2301      	movs	r3, #1
 800041c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(LCD_1_DATA_PORT, &PinCfg);
 800041e:	f107 030c 	add.w	r3, r7, #12
 8000422:	4619      	mov	r1, r3
 8000424:	484b      	ldr	r0, [pc, #300]	@ (8000554 <Lcd_ES_tInit+0x1a8>)
 8000426:	f001 fd09 	bl	8001e3c <MCAL_GPIO_Init>

		// D6 output push pull mode
		PinCfg.GPIO_PinNumber = D6_1;
 800042a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800042e:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 8000430:	2304      	movs	r3, #4
 8000432:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000434:	2301      	movs	r3, #1
 8000436:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(LCD_1_DATA_PORT, &PinCfg);
 8000438:	f107 030c 	add.w	r3, r7, #12
 800043c:	4619      	mov	r1, r3
 800043e:	4845      	ldr	r0, [pc, #276]	@ (8000554 <Lcd_ES_tInit+0x1a8>)
 8000440:	f001 fcfc 	bl	8001e3c <MCAL_GPIO_Init>

		// D7 output push pull mode
		PinCfg.GPIO_PinNumber = D7_1;
 8000444:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000448:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 800044a:	2304      	movs	r3, #4
 800044c:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 800044e:	2301      	movs	r3, #1
 8000450:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(LCD_1_DATA_PORT, &PinCfg);
 8000452:	f107 030c 	add.w	r3, r7, #12
 8000456:	4619      	mov	r1, r3
 8000458:	483e      	ldr	r0, [pc, #248]	@ (8000554 <Lcd_ES_tInit+0x1a8>)
 800045a:	f001 fcef 	bl	8001e3c <MCAL_GPIO_Init>


		Lcd_ES_tsendCmd(LCD_Instant_1,Four_BitMode);   /* Go into 4-bit operating mode*/
 800045e:	2102      	movs	r1, #2
 8000460:	2000      	movs	r0, #0
 8000462:	f000 f8b5 	bl	80005d0 <Lcd_ES_tsendCmd>
		Lcd_ES_tsendCmd(LCD_Instant_1,D4_D7);  /* 2 Line, 5*7 matrix in 4-bit mode */
 8000466:	2128      	movs	r1, #40	@ 0x28
 8000468:	2000      	movs	r0, #0
 800046a:	f000 f8b1 	bl	80005d0 <Lcd_ES_tsendCmd>
		Lcd_ES_tsendCmd(LCD_Instant_1,CursorON);  /* Display on cursor off */
 800046e:	210e      	movs	r1, #14
 8000470:	2000      	movs	r0, #0
 8000472:	f000 f8ad 	bl	80005d0 <Lcd_ES_tsendCmd>
		Lcd_ES_tsendCmd(LCD_Instant_1,IncrCursor);  /* Increment cursor (shift cursor to right) */
 8000476:	2106      	movs	r1, #6
 8000478:	2000      	movs	r0, #0
 800047a:	f000 f8a9 	bl	80005d0 <Lcd_ES_tsendCmd>
		Lcd_ES_tsendCmd(LCD_Instant_1,CLR_Display);  /* Clear display screen */
 800047e:	2101      	movs	r1, #1
 8000480:	2000      	movs	r0, #0
 8000482:	f000 f8a5 	bl	80005d0 <Lcd_ES_tsendCmd>


		break;
 8000486:	e060      	b.n	800054a <Lcd_ES_tInit+0x19e>
	{

		// Pins Configuration for LCD

		// RS output push pull mode
		PinCfg.GPIO_PinNumber = RS_2;
 8000488:	2320      	movs	r3, #32
 800048a:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 800048c:	2304      	movs	r3, #4
 800048e:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000490:	2301      	movs	r3, #1
 8000492:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(LCD_2_CMD_PORT, &PinCfg);
 8000494:	f107 030c 	add.w	r3, r7, #12
 8000498:	4619      	mov	r1, r3
 800049a:	482f      	ldr	r0, [pc, #188]	@ (8000558 <Lcd_ES_tInit+0x1ac>)
 800049c:	f001 fcce 	bl	8001e3c <MCAL_GPIO_Init>

		// EN output push pull mode
		PinCfg.GPIO_PinNumber = EN_2;
 80004a0:	2340      	movs	r3, #64	@ 0x40
 80004a2:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 80004a4:	2304      	movs	r3, #4
 80004a6:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80004a8:	2301      	movs	r3, #1
 80004aa:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(LCD_2_CMD_PORT, &PinCfg);
 80004ac:	f107 030c 	add.w	r3, r7, #12
 80004b0:	4619      	mov	r1, r3
 80004b2:	4829      	ldr	r0, [pc, #164]	@ (8000558 <Lcd_ES_tInit+0x1ac>)
 80004b4:	f001 fcc2 	bl	8001e3c <MCAL_GPIO_Init>

		// D4 output push pull mode
		PinCfg.GPIO_PinNumber = D4_2;
 80004b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004bc:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 80004be:	2304      	movs	r3, #4
 80004c0:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80004c2:	2301      	movs	r3, #1
 80004c4:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(LCD_2_DATA_PORT, &PinCfg);
 80004c6:	f107 030c 	add.w	r3, r7, #12
 80004ca:	4619      	mov	r1, r3
 80004cc:	4822      	ldr	r0, [pc, #136]	@ (8000558 <Lcd_ES_tInit+0x1ac>)
 80004ce:	f001 fcb5 	bl	8001e3c <MCAL_GPIO_Init>

		// D5 output push pull mode
		PinCfg.GPIO_PinNumber = D5_2;
 80004d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004d6:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 80004d8:	2304      	movs	r3, #4
 80004da:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80004dc:	2301      	movs	r3, #1
 80004de:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(LCD_2_DATA_PORT, &PinCfg);
 80004e0:	f107 030c 	add.w	r3, r7, #12
 80004e4:	4619      	mov	r1, r3
 80004e6:	481c      	ldr	r0, [pc, #112]	@ (8000558 <Lcd_ES_tInit+0x1ac>)
 80004e8:	f001 fca8 	bl	8001e3c <MCAL_GPIO_Init>

		// D6 output push pull mode
		PinCfg.GPIO_PinNumber = D6_2;
 80004ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80004f0:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 80004f2:	2304      	movs	r3, #4
 80004f4:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80004f6:	2301      	movs	r3, #1
 80004f8:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(LCD_2_DATA_PORT, &PinCfg);
 80004fa:	f107 030c 	add.w	r3, r7, #12
 80004fe:	4619      	mov	r1, r3
 8000500:	4815      	ldr	r0, [pc, #84]	@ (8000558 <Lcd_ES_tInit+0x1ac>)
 8000502:	f001 fc9b 	bl	8001e3c <MCAL_GPIO_Init>

		// D7 output push pull mode
		PinCfg.GPIO_PinNumber = D7_2;
 8000506:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800050a:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 800050c:	2304      	movs	r3, #4
 800050e:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000510:	2301      	movs	r3, #1
 8000512:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(LCD_2_DATA_PORT, &PinCfg);
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	4619      	mov	r1, r3
 800051a:	480f      	ldr	r0, [pc, #60]	@ (8000558 <Lcd_ES_tInit+0x1ac>)
 800051c:	f001 fc8e 	bl	8001e3c <MCAL_GPIO_Init>


		Lcd_ES_tsendCmd(LCD_Instant_2,Four_BitMode);   /* Go into 4-bit operating mode*/
 8000520:	2102      	movs	r1, #2
 8000522:	2001      	movs	r0, #1
 8000524:	f000 f854 	bl	80005d0 <Lcd_ES_tsendCmd>
		Lcd_ES_tsendCmd(LCD_Instant_2,D4_D7);  /* 2 Line, 5*7 matrix in 4-bit mode */
 8000528:	2128      	movs	r1, #40	@ 0x28
 800052a:	2001      	movs	r0, #1
 800052c:	f000 f850 	bl	80005d0 <Lcd_ES_tsendCmd>
		Lcd_ES_tsendCmd(LCD_Instant_2,CursorON);  /* Display on cursor off */
 8000530:	210e      	movs	r1, #14
 8000532:	2001      	movs	r0, #1
 8000534:	f000 f84c 	bl	80005d0 <Lcd_ES_tsendCmd>
		Lcd_ES_tsendCmd(LCD_Instant_2,IncrCursor);  /* Increment cursor (shift cursor to right) */
 8000538:	2106      	movs	r1, #6
 800053a:	2001      	movs	r0, #1
 800053c:	f000 f848 	bl	80005d0 <Lcd_ES_tsendCmd>
		Lcd_ES_tsendCmd(LCD_Instant_2,CLR_Display);  /* Clear display screen */
 8000540:	2101      	movs	r1, #1
 8000542:	2001      	movs	r0, #1
 8000544:	f000 f844 	bl	80005d0 <Lcd_ES_tsendCmd>


		break;
 8000548:	bf00      	nop
	}
	}


	return ES_OK;
 800054a:	2300      	movs	r3, #0

}
 800054c:	4618      	mov	r0, r3
 800054e:	3710      	adds	r7, #16
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40010c00 	.word	0x40010c00
 8000558:	40010800 	.word	0x40010800

0800055c <wait_ms>:
 *
 *
 *	Ex. 0x28 0b 0010 1000  //Read bit by bit and see if it is low or high
 */

void wait_ms(uint32_t time){
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0;i<time;i++)
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	e00b      	b.n	8000582 <wait_ms+0x26>
		for(j=0;j<255;j++);
 800056a:	2300      	movs	r3, #0
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	e002      	b.n	8000576 <wait_ms+0x1a>
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	3301      	adds	r3, #1
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	68bb      	ldr	r3, [r7, #8]
 8000578:	2bfe      	cmp	r3, #254	@ 0xfe
 800057a:	d9f9      	bls.n	8000570 <wait_ms+0x14>
	for(i=0;i<time;i++)
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	3301      	adds	r3, #1
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	68fa      	ldr	r2, [r7, #12]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	429a      	cmp	r2, r3
 8000588:	d3ef      	bcc.n	800056a <wait_ms+0xe>
}
 800058a:	bf00      	nop
 800058c:	bf00      	nop
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr

08000596 <lcd_ES_tclear>:

ES_t lcd_ES_tclear(LCD_Instant instant)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	b082      	sub	sp, #8
 800059a:	af00      	add	r7, sp, #0
 800059c:	4603      	mov	r3, r0
 800059e:	71fb      	strb	r3, [r7, #7]

	switch(instant){
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d002      	beq.n	80005ac <lcd_ES_tclear+0x16>
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d005      	beq.n	80005b6 <lcd_ES_tclear+0x20>
 80005aa:	e009      	b.n	80005c0 <lcd_ES_tclear+0x2a>
	case LCD_Instant_1:
	{
		Lcd_ES_tsendCmd(LCD_Instant_1,CLR_Display);
 80005ac:	2101      	movs	r1, #1
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 f80e 	bl	80005d0 <Lcd_ES_tsendCmd>
		break;
 80005b4:	e004      	b.n	80005c0 <lcd_ES_tclear+0x2a>
	}
	case LCD_Instant_2:
	{
		Lcd_ES_tsendCmd(LCD_Instant_2,CLR_Display);
 80005b6:	2101      	movs	r1, #1
 80005b8:	2001      	movs	r0, #1
 80005ba:	f000 f809 	bl	80005d0 <Lcd_ES_tsendCmd>
		break;
 80005be:	bf00      	nop
	}
	}


	wait_ms(2);
 80005c0:	2002      	movs	r0, #2
 80005c2:	f7ff ffcb 	bl	800055c <wait_ms>
	return ES_OK;
 80005c6:	2300      	movs	r3, #0
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <Lcd_ES_tsendCmd>:

ES_t Lcd_ES_tsendCmd(LCD_Instant instant, uint8_t cmd){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	460a      	mov	r2, r1
 80005da:	71fb      	strb	r3, [r7, #7]
 80005dc:	4613      	mov	r3, r2
 80005de:	71bb      	strb	r3, [r7, #6]

	switch(instant){
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d003      	beq.n	80005ee <Lcd_ES_tsendCmd+0x1e>
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	f000 80ac 	beq.w	8000744 <Lcd_ES_tsendCmd+0x174>
 80005ec:	e154      	b.n	8000898 <Lcd_ES_tsendCmd+0x2c8>
	case LCD_Instant_1:
	{
		MCAL_GPIO_WritePin(LCD_1_CMD_PORT, RS_1, GPIO_PIN_LOW);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005f4:	48ab      	ldr	r0, [pc, #684]	@ (80008a4 <Lcd_ES_tsendCmd+0x2d4>)
 80005f6:	f001 fcb7 	bl	8001f68 <MCAL_GPIO_WritePin>


		(GET_BIT(cmd,7)) ? MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D7_1,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D7_1,GPIO_PIN_LOW);
 80005fa:	79bb      	ldrb	r3, [r7, #6]
 80005fc:	09db      	lsrs	r3, r3, #7
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	f003 0301 	and.w	r3, r3, #1
 8000604:	2b00      	cmp	r3, #0
 8000606:	d006      	beq.n	8000616 <Lcd_ES_tsendCmd+0x46>
 8000608:	2201      	movs	r2, #1
 800060a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800060e:	48a5      	ldr	r0, [pc, #660]	@ (80008a4 <Lcd_ES_tsendCmd+0x2d4>)
 8000610:	f001 fcaa 	bl	8001f68 <MCAL_GPIO_WritePin>
 8000614:	e005      	b.n	8000622 <Lcd_ES_tsendCmd+0x52>
 8000616:	2200      	movs	r2, #0
 8000618:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800061c:	48a1      	ldr	r0, [pc, #644]	@ (80008a4 <Lcd_ES_tsendCmd+0x2d4>)
 800061e:	f001 fca3 	bl	8001f68 <MCAL_GPIO_WritePin>
		(GET_BIT(cmd,6)) ? MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D6_1,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D6_1,GPIO_PIN_LOW);
 8000622:	79bb      	ldrb	r3, [r7, #6]
 8000624:	099b      	lsrs	r3, r3, #6
 8000626:	b2db      	uxtb	r3, r3
 8000628:	f003 0301 	and.w	r3, r3, #1
 800062c:	2b00      	cmp	r3, #0
 800062e:	d006      	beq.n	800063e <Lcd_ES_tsendCmd+0x6e>
 8000630:	2201      	movs	r2, #1
 8000632:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000636:	489b      	ldr	r0, [pc, #620]	@ (80008a4 <Lcd_ES_tsendCmd+0x2d4>)
 8000638:	f001 fc96 	bl	8001f68 <MCAL_GPIO_WritePin>
 800063c:	e005      	b.n	800064a <Lcd_ES_tsendCmd+0x7a>
 800063e:	2200      	movs	r2, #0
 8000640:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000644:	4897      	ldr	r0, [pc, #604]	@ (80008a4 <Lcd_ES_tsendCmd+0x2d4>)
 8000646:	f001 fc8f 	bl	8001f68 <MCAL_GPIO_WritePin>
		(GET_BIT(cmd,5)) ? MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D5_1,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D5_1,GPIO_PIN_LOW);
 800064a:	79bb      	ldrb	r3, [r7, #6]
 800064c:	095b      	lsrs	r3, r3, #5
 800064e:	b2db      	uxtb	r3, r3
 8000650:	f003 0301 	and.w	r3, r3, #1
 8000654:	2b00      	cmp	r3, #0
 8000656:	d006      	beq.n	8000666 <Lcd_ES_tsendCmd+0x96>
 8000658:	2201      	movs	r2, #1
 800065a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800065e:	4891      	ldr	r0, [pc, #580]	@ (80008a4 <Lcd_ES_tsendCmd+0x2d4>)
 8000660:	f001 fc82 	bl	8001f68 <MCAL_GPIO_WritePin>
 8000664:	e005      	b.n	8000672 <Lcd_ES_tsendCmd+0xa2>
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800066c:	488d      	ldr	r0, [pc, #564]	@ (80008a4 <Lcd_ES_tsendCmd+0x2d4>)
 800066e:	f001 fc7b 	bl	8001f68 <MCAL_GPIO_WritePin>
		(GET_BIT(cmd,4)) ? MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D4_1,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D4_1,GPIO_PIN_LOW);
 8000672:	79bb      	ldrb	r3, [r7, #6]
 8000674:	091b      	lsrs	r3, r3, #4
 8000676:	b2db      	uxtb	r3, r3
 8000678:	f003 0301 	and.w	r3, r3, #1
 800067c:	2b00      	cmp	r3, #0
 800067e:	d006      	beq.n	800068e <Lcd_ES_tsendCmd+0xbe>
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000686:	4887      	ldr	r0, [pc, #540]	@ (80008a4 <Lcd_ES_tsendCmd+0x2d4>)
 8000688:	f001 fc6e 	bl	8001f68 <MCAL_GPIO_WritePin>
 800068c:	e005      	b.n	800069a <Lcd_ES_tsendCmd+0xca>
 800068e:	2200      	movs	r2, #0
 8000690:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000694:	4883      	ldr	r0, [pc, #524]	@ (80008a4 <Lcd_ES_tsendCmd+0x2d4>)
 8000696:	f001 fc67 	bl	8001f68 <MCAL_GPIO_WritePin>
		//Trigger Enable
		LCD_ES_tTrigger_Enable(LCD_Instant_1);
 800069a:	2000      	movs	r0, #0
 800069c:	f7ff fe4e 	bl	800033c <LCD_ES_tTrigger_Enable>
		(GET_BIT(cmd,3)) ? MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D7_1,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D7_1,GPIO_PIN_LOW);
 80006a0:	79bb      	ldrb	r3, [r7, #6]
 80006a2:	08db      	lsrs	r3, r3, #3
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d006      	beq.n	80006bc <Lcd_ES_tsendCmd+0xec>
 80006ae:	2201      	movs	r2, #1
 80006b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006b4:	487b      	ldr	r0, [pc, #492]	@ (80008a4 <Lcd_ES_tsendCmd+0x2d4>)
 80006b6:	f001 fc57 	bl	8001f68 <MCAL_GPIO_WritePin>
 80006ba:	e005      	b.n	80006c8 <Lcd_ES_tsendCmd+0xf8>
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006c2:	4878      	ldr	r0, [pc, #480]	@ (80008a4 <Lcd_ES_tsendCmd+0x2d4>)
 80006c4:	f001 fc50 	bl	8001f68 <MCAL_GPIO_WritePin>
		(GET_BIT(cmd,2)) ? MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D6_1,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D6_1,GPIO_PIN_LOW);
 80006c8:	79bb      	ldrb	r3, [r7, #6]
 80006ca:	089b      	lsrs	r3, r3, #2
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d006      	beq.n	80006e4 <Lcd_ES_tsendCmd+0x114>
 80006d6:	2201      	movs	r2, #1
 80006d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006dc:	4871      	ldr	r0, [pc, #452]	@ (80008a4 <Lcd_ES_tsendCmd+0x2d4>)
 80006de:	f001 fc43 	bl	8001f68 <MCAL_GPIO_WritePin>
 80006e2:	e005      	b.n	80006f0 <Lcd_ES_tsendCmd+0x120>
 80006e4:	2200      	movs	r2, #0
 80006e6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006ea:	486e      	ldr	r0, [pc, #440]	@ (80008a4 <Lcd_ES_tsendCmd+0x2d4>)
 80006ec:	f001 fc3c 	bl	8001f68 <MCAL_GPIO_WritePin>
		(GET_BIT(cmd,1)) ? MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D5_1,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D5_1,GPIO_PIN_LOW);
 80006f0:	79bb      	ldrb	r3, [r7, #6]
 80006f2:	085b      	lsrs	r3, r3, #1
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d006      	beq.n	800070c <Lcd_ES_tsendCmd+0x13c>
 80006fe:	2201      	movs	r2, #1
 8000700:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000704:	4867      	ldr	r0, [pc, #412]	@ (80008a4 <Lcd_ES_tsendCmd+0x2d4>)
 8000706:	f001 fc2f 	bl	8001f68 <MCAL_GPIO_WritePin>
 800070a:	e005      	b.n	8000718 <Lcd_ES_tsendCmd+0x148>
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000712:	4864      	ldr	r0, [pc, #400]	@ (80008a4 <Lcd_ES_tsendCmd+0x2d4>)
 8000714:	f001 fc28 	bl	8001f68 <MCAL_GPIO_WritePin>
		(GET_BIT(cmd,0)) ? MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D4_1,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D4_1,GPIO_PIN_LOW);
 8000718:	79bb      	ldrb	r3, [r7, #6]
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	2b00      	cmp	r3, #0
 8000720:	d006      	beq.n	8000730 <Lcd_ES_tsendCmd+0x160>
 8000722:	2201      	movs	r2, #1
 8000724:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000728:	485e      	ldr	r0, [pc, #376]	@ (80008a4 <Lcd_ES_tsendCmd+0x2d4>)
 800072a:	f001 fc1d 	bl	8001f68 <MCAL_GPIO_WritePin>
 800072e:	e005      	b.n	800073c <Lcd_ES_tsendCmd+0x16c>
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000736:	485b      	ldr	r0, [pc, #364]	@ (80008a4 <Lcd_ES_tsendCmd+0x2d4>)
 8000738:	f001 fc16 	bl	8001f68 <MCAL_GPIO_WritePin>
		//Trigger Enable
		LCD_ES_tTrigger_Enable(LCD_Instant_1);
 800073c:	2000      	movs	r0, #0
 800073e:	f7ff fdfd 	bl	800033c <LCD_ES_tTrigger_Enable>
		break;
 8000742:	e0a9      	b.n	8000898 <Lcd_ES_tsendCmd+0x2c8>
	}
	case LCD_Instant_2:
	{
		MCAL_GPIO_WritePin(LCD_2_CMD_PORT, RS_2, GPIO_PIN_LOW);
 8000744:	2200      	movs	r2, #0
 8000746:	2120      	movs	r1, #32
 8000748:	4857      	ldr	r0, [pc, #348]	@ (80008a8 <Lcd_ES_tsendCmd+0x2d8>)
 800074a:	f001 fc0d 	bl	8001f68 <MCAL_GPIO_WritePin>


		(GET_BIT(cmd,7)) ? MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D7_2,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D7_2,GPIO_PIN_LOW);
 800074e:	79bb      	ldrb	r3, [r7, #6]
 8000750:	09db      	lsrs	r3, r3, #7
 8000752:	b2db      	uxtb	r3, r3
 8000754:	f003 0301 	and.w	r3, r3, #1
 8000758:	2b00      	cmp	r3, #0
 800075a:	d006      	beq.n	800076a <Lcd_ES_tsendCmd+0x19a>
 800075c:	2201      	movs	r2, #1
 800075e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000762:	4851      	ldr	r0, [pc, #324]	@ (80008a8 <Lcd_ES_tsendCmd+0x2d8>)
 8000764:	f001 fc00 	bl	8001f68 <MCAL_GPIO_WritePin>
 8000768:	e005      	b.n	8000776 <Lcd_ES_tsendCmd+0x1a6>
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000770:	484d      	ldr	r0, [pc, #308]	@ (80008a8 <Lcd_ES_tsendCmd+0x2d8>)
 8000772:	f001 fbf9 	bl	8001f68 <MCAL_GPIO_WritePin>
		(GET_BIT(cmd,6)) ? MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D6_2,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D6_2,GPIO_PIN_LOW);
 8000776:	79bb      	ldrb	r3, [r7, #6]
 8000778:	099b      	lsrs	r3, r3, #6
 800077a:	b2db      	uxtb	r3, r3
 800077c:	f003 0301 	and.w	r3, r3, #1
 8000780:	2b00      	cmp	r3, #0
 8000782:	d006      	beq.n	8000792 <Lcd_ES_tsendCmd+0x1c2>
 8000784:	2201      	movs	r2, #1
 8000786:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800078a:	4847      	ldr	r0, [pc, #284]	@ (80008a8 <Lcd_ES_tsendCmd+0x2d8>)
 800078c:	f001 fbec 	bl	8001f68 <MCAL_GPIO_WritePin>
 8000790:	e005      	b.n	800079e <Lcd_ES_tsendCmd+0x1ce>
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000798:	4843      	ldr	r0, [pc, #268]	@ (80008a8 <Lcd_ES_tsendCmd+0x2d8>)
 800079a:	f001 fbe5 	bl	8001f68 <MCAL_GPIO_WritePin>
		(GET_BIT(cmd,5)) ? MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D5_2,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D5_2,GPIO_PIN_LOW);
 800079e:	79bb      	ldrb	r3, [r7, #6]
 80007a0:	095b      	lsrs	r3, r3, #5
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	f003 0301 	and.w	r3, r3, #1
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d006      	beq.n	80007ba <Lcd_ES_tsendCmd+0x1ea>
 80007ac:	2201      	movs	r2, #1
 80007ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007b2:	483d      	ldr	r0, [pc, #244]	@ (80008a8 <Lcd_ES_tsendCmd+0x2d8>)
 80007b4:	f001 fbd8 	bl	8001f68 <MCAL_GPIO_WritePin>
 80007b8:	e005      	b.n	80007c6 <Lcd_ES_tsendCmd+0x1f6>
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007c0:	4839      	ldr	r0, [pc, #228]	@ (80008a8 <Lcd_ES_tsendCmd+0x2d8>)
 80007c2:	f001 fbd1 	bl	8001f68 <MCAL_GPIO_WritePin>
		(GET_BIT(cmd,4)) ? MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D4_2,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D4_2,GPIO_PIN_LOW);
 80007c6:	79bb      	ldrb	r3, [r7, #6]
 80007c8:	091b      	lsrs	r3, r3, #4
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d006      	beq.n	80007e2 <Lcd_ES_tsendCmd+0x212>
 80007d4:	2201      	movs	r2, #1
 80007d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007da:	4833      	ldr	r0, [pc, #204]	@ (80008a8 <Lcd_ES_tsendCmd+0x2d8>)
 80007dc:	f001 fbc4 	bl	8001f68 <MCAL_GPIO_WritePin>
 80007e0:	e005      	b.n	80007ee <Lcd_ES_tsendCmd+0x21e>
 80007e2:	2200      	movs	r2, #0
 80007e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007e8:	482f      	ldr	r0, [pc, #188]	@ (80008a8 <Lcd_ES_tsendCmd+0x2d8>)
 80007ea:	f001 fbbd 	bl	8001f68 <MCAL_GPIO_WritePin>
		//Trigger Enable
		LCD_ES_tTrigger_Enable(LCD_Instant_2);
 80007ee:	2001      	movs	r0, #1
 80007f0:	f7ff fda4 	bl	800033c <LCD_ES_tTrigger_Enable>
		(GET_BIT(cmd,3)) ? MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D7_2,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D7_2,GPIO_PIN_LOW);
 80007f4:	79bb      	ldrb	r3, [r7, #6]
 80007f6:	08db      	lsrs	r3, r3, #3
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d006      	beq.n	8000810 <Lcd_ES_tsendCmd+0x240>
 8000802:	2201      	movs	r2, #1
 8000804:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000808:	4827      	ldr	r0, [pc, #156]	@ (80008a8 <Lcd_ES_tsendCmd+0x2d8>)
 800080a:	f001 fbad 	bl	8001f68 <MCAL_GPIO_WritePin>
 800080e:	e005      	b.n	800081c <Lcd_ES_tsendCmd+0x24c>
 8000810:	2200      	movs	r2, #0
 8000812:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000816:	4824      	ldr	r0, [pc, #144]	@ (80008a8 <Lcd_ES_tsendCmd+0x2d8>)
 8000818:	f001 fba6 	bl	8001f68 <MCAL_GPIO_WritePin>
		(GET_BIT(cmd,2)) ? MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D6_2,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D6_2,GPIO_PIN_LOW);
 800081c:	79bb      	ldrb	r3, [r7, #6]
 800081e:	089b      	lsrs	r3, r3, #2
 8000820:	b2db      	uxtb	r3, r3
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	2b00      	cmp	r3, #0
 8000828:	d006      	beq.n	8000838 <Lcd_ES_tsendCmd+0x268>
 800082a:	2201      	movs	r2, #1
 800082c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000830:	481d      	ldr	r0, [pc, #116]	@ (80008a8 <Lcd_ES_tsendCmd+0x2d8>)
 8000832:	f001 fb99 	bl	8001f68 <MCAL_GPIO_WritePin>
 8000836:	e005      	b.n	8000844 <Lcd_ES_tsendCmd+0x274>
 8000838:	2200      	movs	r2, #0
 800083a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800083e:	481a      	ldr	r0, [pc, #104]	@ (80008a8 <Lcd_ES_tsendCmd+0x2d8>)
 8000840:	f001 fb92 	bl	8001f68 <MCAL_GPIO_WritePin>
		(GET_BIT(cmd,1)) ? MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D5_2,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D5_2,GPIO_PIN_LOW);
 8000844:	79bb      	ldrb	r3, [r7, #6]
 8000846:	085b      	lsrs	r3, r3, #1
 8000848:	b2db      	uxtb	r3, r3
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	2b00      	cmp	r3, #0
 8000850:	d006      	beq.n	8000860 <Lcd_ES_tsendCmd+0x290>
 8000852:	2201      	movs	r2, #1
 8000854:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000858:	4813      	ldr	r0, [pc, #76]	@ (80008a8 <Lcd_ES_tsendCmd+0x2d8>)
 800085a:	f001 fb85 	bl	8001f68 <MCAL_GPIO_WritePin>
 800085e:	e005      	b.n	800086c <Lcd_ES_tsendCmd+0x29c>
 8000860:	2200      	movs	r2, #0
 8000862:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000866:	4810      	ldr	r0, [pc, #64]	@ (80008a8 <Lcd_ES_tsendCmd+0x2d8>)
 8000868:	f001 fb7e 	bl	8001f68 <MCAL_GPIO_WritePin>
		(GET_BIT(cmd,0)) ? MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D4_2,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D4_2,GPIO_PIN_LOW);
 800086c:	79bb      	ldrb	r3, [r7, #6]
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	2b00      	cmp	r3, #0
 8000874:	d006      	beq.n	8000884 <Lcd_ES_tsendCmd+0x2b4>
 8000876:	2201      	movs	r2, #1
 8000878:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800087c:	480a      	ldr	r0, [pc, #40]	@ (80008a8 <Lcd_ES_tsendCmd+0x2d8>)
 800087e:	f001 fb73 	bl	8001f68 <MCAL_GPIO_WritePin>
 8000882:	e005      	b.n	8000890 <Lcd_ES_tsendCmd+0x2c0>
 8000884:	2200      	movs	r2, #0
 8000886:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800088a:	4807      	ldr	r0, [pc, #28]	@ (80008a8 <Lcd_ES_tsendCmd+0x2d8>)
 800088c:	f001 fb6c 	bl	8001f68 <MCAL_GPIO_WritePin>
		//Trigger Enable
		LCD_ES_tTrigger_Enable(LCD_Instant_2);
 8000890:	2001      	movs	r0, #1
 8000892:	f7ff fd53 	bl	800033c <LCD_ES_tTrigger_Enable>
		break;
 8000896:	bf00      	nop
	}
	}

	return ES_OK;
 8000898:	2300      	movs	r3, #0

}
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40010c00 	.word	0x40010c00
 80008a8:	40010800 	.word	0x40010800

080008ac <Lcd_ES_tsendChar>:
ES_t Lcd_ES_tsendChar(LCD_Instant instant, uint8_t data){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	460a      	mov	r2, r1
 80008b6:	71fb      	strb	r3, [r7, #7]
 80008b8:	4613      	mov	r3, r2
 80008ba:	71bb      	strb	r3, [r7, #6]

	switch(instant){
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d003      	beq.n	80008ca <Lcd_ES_tsendChar+0x1e>
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	f000 80ac 	beq.w	8000a20 <Lcd_ES_tsendChar+0x174>
 80008c8:	e154      	b.n	8000b74 <Lcd_ES_tsendChar+0x2c8>
	case LCD_Instant_1:
	{
		MCAL_GPIO_WritePin(LCD_1_CMD_PORT, RS_1, GPIO_PIN_HIGH);
 80008ca:	2201      	movs	r2, #1
 80008cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008d0:	48ab      	ldr	r0, [pc, #684]	@ (8000b80 <Lcd_ES_tsendChar+0x2d4>)
 80008d2:	f001 fb49 	bl	8001f68 <MCAL_GPIO_WritePin>


		(GET_BIT(data,7)) ? MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D7_1,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D7_1,GPIO_PIN_LOW);
 80008d6:	79bb      	ldrb	r3, [r7, #6]
 80008d8:	09db      	lsrs	r3, r3, #7
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	f003 0301 	and.w	r3, r3, #1
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d006      	beq.n	80008f2 <Lcd_ES_tsendChar+0x46>
 80008e4:	2201      	movs	r2, #1
 80008e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008ea:	48a5      	ldr	r0, [pc, #660]	@ (8000b80 <Lcd_ES_tsendChar+0x2d4>)
 80008ec:	f001 fb3c 	bl	8001f68 <MCAL_GPIO_WritePin>
 80008f0:	e005      	b.n	80008fe <Lcd_ES_tsendChar+0x52>
 80008f2:	2200      	movs	r2, #0
 80008f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008f8:	48a1      	ldr	r0, [pc, #644]	@ (8000b80 <Lcd_ES_tsendChar+0x2d4>)
 80008fa:	f001 fb35 	bl	8001f68 <MCAL_GPIO_WritePin>
		(GET_BIT(data,6)) ? MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D6_1,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D6_1,GPIO_PIN_LOW);
 80008fe:	79bb      	ldrb	r3, [r7, #6]
 8000900:	099b      	lsrs	r3, r3, #6
 8000902:	b2db      	uxtb	r3, r3
 8000904:	f003 0301 	and.w	r3, r3, #1
 8000908:	2b00      	cmp	r3, #0
 800090a:	d006      	beq.n	800091a <Lcd_ES_tsendChar+0x6e>
 800090c:	2201      	movs	r2, #1
 800090e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000912:	489b      	ldr	r0, [pc, #620]	@ (8000b80 <Lcd_ES_tsendChar+0x2d4>)
 8000914:	f001 fb28 	bl	8001f68 <MCAL_GPIO_WritePin>
 8000918:	e005      	b.n	8000926 <Lcd_ES_tsendChar+0x7a>
 800091a:	2200      	movs	r2, #0
 800091c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000920:	4897      	ldr	r0, [pc, #604]	@ (8000b80 <Lcd_ES_tsendChar+0x2d4>)
 8000922:	f001 fb21 	bl	8001f68 <MCAL_GPIO_WritePin>
		(GET_BIT(data,5)) ? MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D5_1,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D5_1,GPIO_PIN_LOW);
 8000926:	79bb      	ldrb	r3, [r7, #6]
 8000928:	095b      	lsrs	r3, r3, #5
 800092a:	b2db      	uxtb	r3, r3
 800092c:	f003 0301 	and.w	r3, r3, #1
 8000930:	2b00      	cmp	r3, #0
 8000932:	d006      	beq.n	8000942 <Lcd_ES_tsendChar+0x96>
 8000934:	2201      	movs	r2, #1
 8000936:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800093a:	4891      	ldr	r0, [pc, #580]	@ (8000b80 <Lcd_ES_tsendChar+0x2d4>)
 800093c:	f001 fb14 	bl	8001f68 <MCAL_GPIO_WritePin>
 8000940:	e005      	b.n	800094e <Lcd_ES_tsendChar+0xa2>
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000948:	488d      	ldr	r0, [pc, #564]	@ (8000b80 <Lcd_ES_tsendChar+0x2d4>)
 800094a:	f001 fb0d 	bl	8001f68 <MCAL_GPIO_WritePin>
		(GET_BIT(data,4)) ? MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D4_1,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D4_1,GPIO_PIN_LOW);
 800094e:	79bb      	ldrb	r3, [r7, #6]
 8000950:	091b      	lsrs	r3, r3, #4
 8000952:	b2db      	uxtb	r3, r3
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	2b00      	cmp	r3, #0
 800095a:	d006      	beq.n	800096a <Lcd_ES_tsendChar+0xbe>
 800095c:	2201      	movs	r2, #1
 800095e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000962:	4887      	ldr	r0, [pc, #540]	@ (8000b80 <Lcd_ES_tsendChar+0x2d4>)
 8000964:	f001 fb00 	bl	8001f68 <MCAL_GPIO_WritePin>
 8000968:	e005      	b.n	8000976 <Lcd_ES_tsendChar+0xca>
 800096a:	2200      	movs	r2, #0
 800096c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000970:	4883      	ldr	r0, [pc, #524]	@ (8000b80 <Lcd_ES_tsendChar+0x2d4>)
 8000972:	f001 faf9 	bl	8001f68 <MCAL_GPIO_WritePin>
		//Trigger Enable
		LCD_ES_tTrigger_Enable(LCD_Instant_1);
 8000976:	2000      	movs	r0, #0
 8000978:	f7ff fce0 	bl	800033c <LCD_ES_tTrigger_Enable>
		(GET_BIT(data,3)) ? MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D7_1,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D7_1,GPIO_PIN_LOW);
 800097c:	79bb      	ldrb	r3, [r7, #6]
 800097e:	08db      	lsrs	r3, r3, #3
 8000980:	b2db      	uxtb	r3, r3
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	2b00      	cmp	r3, #0
 8000988:	d006      	beq.n	8000998 <Lcd_ES_tsendChar+0xec>
 800098a:	2201      	movs	r2, #1
 800098c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000990:	487b      	ldr	r0, [pc, #492]	@ (8000b80 <Lcd_ES_tsendChar+0x2d4>)
 8000992:	f001 fae9 	bl	8001f68 <MCAL_GPIO_WritePin>
 8000996:	e005      	b.n	80009a4 <Lcd_ES_tsendChar+0xf8>
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800099e:	4878      	ldr	r0, [pc, #480]	@ (8000b80 <Lcd_ES_tsendChar+0x2d4>)
 80009a0:	f001 fae2 	bl	8001f68 <MCAL_GPIO_WritePin>
		(GET_BIT(data,2)) ? MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D6_1,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D6_1,GPIO_PIN_LOW);
 80009a4:	79bb      	ldrb	r3, [r7, #6]
 80009a6:	089b      	lsrs	r3, r3, #2
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d006      	beq.n	80009c0 <Lcd_ES_tsendChar+0x114>
 80009b2:	2201      	movs	r2, #1
 80009b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009b8:	4871      	ldr	r0, [pc, #452]	@ (8000b80 <Lcd_ES_tsendChar+0x2d4>)
 80009ba:	f001 fad5 	bl	8001f68 <MCAL_GPIO_WritePin>
 80009be:	e005      	b.n	80009cc <Lcd_ES_tsendChar+0x120>
 80009c0:	2200      	movs	r2, #0
 80009c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009c6:	486e      	ldr	r0, [pc, #440]	@ (8000b80 <Lcd_ES_tsendChar+0x2d4>)
 80009c8:	f001 face 	bl	8001f68 <MCAL_GPIO_WritePin>
		(GET_BIT(data,1)) ? MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D5_1,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D5_1,GPIO_PIN_LOW);
 80009cc:	79bb      	ldrb	r3, [r7, #6]
 80009ce:	085b      	lsrs	r3, r3, #1
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d006      	beq.n	80009e8 <Lcd_ES_tsendChar+0x13c>
 80009da:	2201      	movs	r2, #1
 80009dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009e0:	4867      	ldr	r0, [pc, #412]	@ (8000b80 <Lcd_ES_tsendChar+0x2d4>)
 80009e2:	f001 fac1 	bl	8001f68 <MCAL_GPIO_WritePin>
 80009e6:	e005      	b.n	80009f4 <Lcd_ES_tsendChar+0x148>
 80009e8:	2200      	movs	r2, #0
 80009ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009ee:	4864      	ldr	r0, [pc, #400]	@ (8000b80 <Lcd_ES_tsendChar+0x2d4>)
 80009f0:	f001 faba 	bl	8001f68 <MCAL_GPIO_WritePin>
		(GET_BIT(data,0)) ? MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D4_1,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D4_1,GPIO_PIN_LOW);
 80009f4:	79bb      	ldrb	r3, [r7, #6]
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d006      	beq.n	8000a0c <Lcd_ES_tsendChar+0x160>
 80009fe:	2201      	movs	r2, #1
 8000a00:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a04:	485e      	ldr	r0, [pc, #376]	@ (8000b80 <Lcd_ES_tsendChar+0x2d4>)
 8000a06:	f001 faaf 	bl	8001f68 <MCAL_GPIO_WritePin>
 8000a0a:	e005      	b.n	8000a18 <Lcd_ES_tsendChar+0x16c>
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a12:	485b      	ldr	r0, [pc, #364]	@ (8000b80 <Lcd_ES_tsendChar+0x2d4>)
 8000a14:	f001 faa8 	bl	8001f68 <MCAL_GPIO_WritePin>
		//Trigger Enable
		LCD_ES_tTrigger_Enable(LCD_Instant_1);
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f7ff fc8f 	bl	800033c <LCD_ES_tTrigger_Enable>
		break;
 8000a1e:	e0a9      	b.n	8000b74 <Lcd_ES_tsendChar+0x2c8>
	}
	case LCD_Instant_2:
	{
		MCAL_GPIO_WritePin(LCD_2_CMD_PORT, RS_2, GPIO_PIN_HIGH);
 8000a20:	2201      	movs	r2, #1
 8000a22:	2120      	movs	r1, #32
 8000a24:	4857      	ldr	r0, [pc, #348]	@ (8000b84 <Lcd_ES_tsendChar+0x2d8>)
 8000a26:	f001 fa9f 	bl	8001f68 <MCAL_GPIO_WritePin>


		(GET_BIT(data,7)) ? MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D7_2,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D7_2,GPIO_PIN_LOW);
 8000a2a:	79bb      	ldrb	r3, [r7, #6]
 8000a2c:	09db      	lsrs	r3, r3, #7
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	f003 0301 	and.w	r3, r3, #1
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d006      	beq.n	8000a46 <Lcd_ES_tsendChar+0x19a>
 8000a38:	2201      	movs	r2, #1
 8000a3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a3e:	4851      	ldr	r0, [pc, #324]	@ (8000b84 <Lcd_ES_tsendChar+0x2d8>)
 8000a40:	f001 fa92 	bl	8001f68 <MCAL_GPIO_WritePin>
 8000a44:	e005      	b.n	8000a52 <Lcd_ES_tsendChar+0x1a6>
 8000a46:	2200      	movs	r2, #0
 8000a48:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a4c:	484d      	ldr	r0, [pc, #308]	@ (8000b84 <Lcd_ES_tsendChar+0x2d8>)
 8000a4e:	f001 fa8b 	bl	8001f68 <MCAL_GPIO_WritePin>
		(GET_BIT(data,6)) ? MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D6_2,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D6_2,GPIO_PIN_LOW);
 8000a52:	79bb      	ldrb	r3, [r7, #6]
 8000a54:	099b      	lsrs	r3, r3, #6
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	f003 0301 	and.w	r3, r3, #1
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d006      	beq.n	8000a6e <Lcd_ES_tsendChar+0x1c2>
 8000a60:	2201      	movs	r2, #1
 8000a62:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a66:	4847      	ldr	r0, [pc, #284]	@ (8000b84 <Lcd_ES_tsendChar+0x2d8>)
 8000a68:	f001 fa7e 	bl	8001f68 <MCAL_GPIO_WritePin>
 8000a6c:	e005      	b.n	8000a7a <Lcd_ES_tsendChar+0x1ce>
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a74:	4843      	ldr	r0, [pc, #268]	@ (8000b84 <Lcd_ES_tsendChar+0x2d8>)
 8000a76:	f001 fa77 	bl	8001f68 <MCAL_GPIO_WritePin>
		(GET_BIT(data,5)) ? MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D5_2,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D5_2,GPIO_PIN_LOW);
 8000a7a:	79bb      	ldrb	r3, [r7, #6]
 8000a7c:	095b      	lsrs	r3, r3, #5
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	f003 0301 	and.w	r3, r3, #1
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d006      	beq.n	8000a96 <Lcd_ES_tsendChar+0x1ea>
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a8e:	483d      	ldr	r0, [pc, #244]	@ (8000b84 <Lcd_ES_tsendChar+0x2d8>)
 8000a90:	f001 fa6a 	bl	8001f68 <MCAL_GPIO_WritePin>
 8000a94:	e005      	b.n	8000aa2 <Lcd_ES_tsendChar+0x1f6>
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a9c:	4839      	ldr	r0, [pc, #228]	@ (8000b84 <Lcd_ES_tsendChar+0x2d8>)
 8000a9e:	f001 fa63 	bl	8001f68 <MCAL_GPIO_WritePin>
		(GET_BIT(data,4)) ? MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D4_2,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D4_2,GPIO_PIN_LOW);
 8000aa2:	79bb      	ldrb	r3, [r7, #6]
 8000aa4:	091b      	lsrs	r3, r3, #4
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d006      	beq.n	8000abe <Lcd_ES_tsendChar+0x212>
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ab6:	4833      	ldr	r0, [pc, #204]	@ (8000b84 <Lcd_ES_tsendChar+0x2d8>)
 8000ab8:	f001 fa56 	bl	8001f68 <MCAL_GPIO_WritePin>
 8000abc:	e005      	b.n	8000aca <Lcd_ES_tsendChar+0x21e>
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ac4:	482f      	ldr	r0, [pc, #188]	@ (8000b84 <Lcd_ES_tsendChar+0x2d8>)
 8000ac6:	f001 fa4f 	bl	8001f68 <MCAL_GPIO_WritePin>
		//Trigger Enable
		LCD_ES_tTrigger_Enable(LCD_Instant_2);
 8000aca:	2001      	movs	r0, #1
 8000acc:	f7ff fc36 	bl	800033c <LCD_ES_tTrigger_Enable>
		(GET_BIT(data,3)) ? MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D7_2,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D7_2,GPIO_PIN_LOW);
 8000ad0:	79bb      	ldrb	r3, [r7, #6]
 8000ad2:	08db      	lsrs	r3, r3, #3
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d006      	beq.n	8000aec <Lcd_ES_tsendChar+0x240>
 8000ade:	2201      	movs	r2, #1
 8000ae0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ae4:	4827      	ldr	r0, [pc, #156]	@ (8000b84 <Lcd_ES_tsendChar+0x2d8>)
 8000ae6:	f001 fa3f 	bl	8001f68 <MCAL_GPIO_WritePin>
 8000aea:	e005      	b.n	8000af8 <Lcd_ES_tsendChar+0x24c>
 8000aec:	2200      	movs	r2, #0
 8000aee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000af2:	4824      	ldr	r0, [pc, #144]	@ (8000b84 <Lcd_ES_tsendChar+0x2d8>)
 8000af4:	f001 fa38 	bl	8001f68 <MCAL_GPIO_WritePin>
		(GET_BIT(data,2)) ? MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D6_2,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D6_2,GPIO_PIN_LOW);
 8000af8:	79bb      	ldrb	r3, [r7, #6]
 8000afa:	089b      	lsrs	r3, r3, #2
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d006      	beq.n	8000b14 <Lcd_ES_tsendChar+0x268>
 8000b06:	2201      	movs	r2, #1
 8000b08:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b0c:	481d      	ldr	r0, [pc, #116]	@ (8000b84 <Lcd_ES_tsendChar+0x2d8>)
 8000b0e:	f001 fa2b 	bl	8001f68 <MCAL_GPIO_WritePin>
 8000b12:	e005      	b.n	8000b20 <Lcd_ES_tsendChar+0x274>
 8000b14:	2200      	movs	r2, #0
 8000b16:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b1a:	481a      	ldr	r0, [pc, #104]	@ (8000b84 <Lcd_ES_tsendChar+0x2d8>)
 8000b1c:	f001 fa24 	bl	8001f68 <MCAL_GPIO_WritePin>
		(GET_BIT(data,1)) ? MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D5_2,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D5_2,GPIO_PIN_LOW);
 8000b20:	79bb      	ldrb	r3, [r7, #6]
 8000b22:	085b      	lsrs	r3, r3, #1
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d006      	beq.n	8000b3c <Lcd_ES_tsendChar+0x290>
 8000b2e:	2201      	movs	r2, #1
 8000b30:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b34:	4813      	ldr	r0, [pc, #76]	@ (8000b84 <Lcd_ES_tsendChar+0x2d8>)
 8000b36:	f001 fa17 	bl	8001f68 <MCAL_GPIO_WritePin>
 8000b3a:	e005      	b.n	8000b48 <Lcd_ES_tsendChar+0x29c>
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b42:	4810      	ldr	r0, [pc, #64]	@ (8000b84 <Lcd_ES_tsendChar+0x2d8>)
 8000b44:	f001 fa10 	bl	8001f68 <MCAL_GPIO_WritePin>
		(GET_BIT(data,0)) ? MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D4_2,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D4_2,GPIO_PIN_LOW);
 8000b48:	79bb      	ldrb	r3, [r7, #6]
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d006      	beq.n	8000b60 <Lcd_ES_tsendChar+0x2b4>
 8000b52:	2201      	movs	r2, #1
 8000b54:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b58:	480a      	ldr	r0, [pc, #40]	@ (8000b84 <Lcd_ES_tsendChar+0x2d8>)
 8000b5a:	f001 fa05 	bl	8001f68 <MCAL_GPIO_WritePin>
 8000b5e:	e005      	b.n	8000b6c <Lcd_ES_tsendChar+0x2c0>
 8000b60:	2200      	movs	r2, #0
 8000b62:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b66:	4807      	ldr	r0, [pc, #28]	@ (8000b84 <Lcd_ES_tsendChar+0x2d8>)
 8000b68:	f001 f9fe 	bl	8001f68 <MCAL_GPIO_WritePin>
		//Trigger Enable
		LCD_ES_tTrigger_Enable(LCD_Instant_2);
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f7ff fbe5 	bl	800033c <LCD_ES_tTrigger_Enable>
		break;
 8000b72:	bf00      	nop
	}
	}
	return ES_OK;
 8000b74:	2300      	movs	r3, #0

}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40010c00 	.word	0x40010c00
 8000b84:	40010800 	.word	0x40010800

08000b88 <Lcd_ES_tsendString>:

ES_t Lcd_ES_tsendString(LCD_Instant instant, char *data)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	6039      	str	r1, [r7, #0]
 8000b92:	71fb      	strb	r3, [r7, #7]

	switch(instant){
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d002      	beq.n	8000ba0 <Lcd_ES_tsendString+0x18>
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d01b      	beq.n	8000bd6 <Lcd_ES_tsendString+0x4e>
 8000b9e:	e034      	b.n	8000c0a <Lcd_ES_tsendString+0x82>
	case LCD_Instant_1:
	{
		MCAL_GPIO_WritePin(LCD_1_CMD_PORT, RS_1, GPIO_PIN_HIGH);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ba6:	481b      	ldr	r0, [pc, #108]	@ (8000c14 <Lcd_ES_tsendString+0x8c>)
 8000ba8:	f001 f9de 	bl	8001f68 <MCAL_GPIO_WritePin>

		unsigned char i=0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	73fb      	strb	r3, [r7, #15]
		while(data[i]!=0)
 8000bb0:	e00a      	b.n	8000bc8 <Lcd_ES_tsendString+0x40>
		{
			Lcd_ES_tsendChar(LCD_Instant_1,data[i]);
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]
 8000bb4:	683a      	ldr	r2, [r7, #0]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f7ff fe75 	bl	80008ac <Lcd_ES_tsendChar>
			i++;
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	73fb      	strb	r3, [r7, #15]
		while(data[i]!=0)
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
 8000bca:	683a      	ldr	r2, [r7, #0]
 8000bcc:	4413      	add	r3, r2
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d1ee      	bne.n	8000bb2 <Lcd_ES_tsendString+0x2a>
		}
		break;
 8000bd4:	e019      	b.n	8000c0a <Lcd_ES_tsendString+0x82>
	}
	case LCD_Instant_2:
	{
		MCAL_GPIO_WritePin(LCD_2_CMD_PORT, RS_2, GPIO_PIN_HIGH);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	2120      	movs	r1, #32
 8000bda:	480f      	ldr	r0, [pc, #60]	@ (8000c18 <Lcd_ES_tsendString+0x90>)
 8000bdc:	f001 f9c4 	bl	8001f68 <MCAL_GPIO_WritePin>

		unsigned char i=0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	73bb      	strb	r3, [r7, #14]
		while(data[i]!=0)
 8000be4:	e00a      	b.n	8000bfc <Lcd_ES_tsendString+0x74>
		{
			Lcd_ES_tsendChar(LCD_Instant_2,data[i]);
 8000be6:	7bbb      	ldrb	r3, [r7, #14]
 8000be8:	683a      	ldr	r2, [r7, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	4619      	mov	r1, r3
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	f7ff fe5b 	bl	80008ac <Lcd_ES_tsendChar>
			i++;
 8000bf6:	7bbb      	ldrb	r3, [r7, #14]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	73bb      	strb	r3, [r7, #14]
		while(data[i]!=0)
 8000bfc:	7bbb      	ldrb	r3, [r7, #14]
 8000bfe:	683a      	ldr	r2, [r7, #0]
 8000c00:	4413      	add	r3, r2
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d1ee      	bne.n	8000be6 <Lcd_ES_tsendString+0x5e>
		}
		break;
 8000c08:	bf00      	nop
	}
	}


	return ES_OK;
 8000c0a:	2300      	movs	r3, #0
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40010c00 	.word	0x40010c00
 8000c18:	40010800 	.word	0x40010800

08000c1c <Lcd_ES_tdisplayNum>:
}


//A function to display Numbers instead of characters
ES_t Lcd_ES_tdisplayNum(LCD_Instant instant, uint16_t num)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	@ 0x28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	460a      	mov	r2, r1
 8000c26:	71fb      	strb	r3, [r7, #7]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	80bb      	strh	r3, [r7, #4]

	switch(instant){
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d002      	beq.n	8000c38 <Lcd_ES_tdisplayNum+0x1c>
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d050      	beq.n	8000cd8 <Lcd_ES_tdisplayNum+0xbc>
 8000c36:	e09e      	b.n	8000d76 <Lcd_ES_tdisplayNum+0x15a>
	case LCD_Instant_1:
	{
		MCAL_GPIO_WritePin(LCD_1_CMD_PORT, RS_1, GPIO_PIN_HIGH);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c3e:	4850      	ldr	r0, [pc, #320]	@ (8000d80 <Lcd_ES_tdisplayNum+0x164>)
 8000c40:	f001 f992 	bl	8001f68 <MCAL_GPIO_WritePin>

		uint8_t ch[10],i=0,j=0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if(num == 0)
 8000c50:	88bb      	ldrh	r3, [r7, #4]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d123      	bne.n	8000c9e <Lcd_ES_tdisplayNum+0x82>
		{
			Lcd_ES_tsendChar(LCD_Instant_1,'0');
 8000c56:	2130      	movs	r1, #48	@ 0x30
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f7ff fe27 	bl	80008ac <Lcd_ES_tsendChar>
			for(j=i;j>0;j--)
			{
				Lcd_ES_tsendChar(LCD_Instant_1,ch[j-1]);
			}
		}
		break;
 8000c5e:	e08a      	b.n	8000d76 <Lcd_ES_tdisplayNum+0x15a>
				ch[i] = num % 10 + '0';  //To convert int to char
 8000c60:	88ba      	ldrh	r2, [r7, #4]
 8000c62:	4b48      	ldr	r3, [pc, #288]	@ (8000d84 <Lcd_ES_tdisplayNum+0x168>)
 8000c64:	fba3 1302 	umull	r1, r3, r3, r2
 8000c68:	08d9      	lsrs	r1, r3, #3
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	440b      	add	r3, r1
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c7c:	3230      	adds	r2, #48	@ 0x30
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	3328      	adds	r3, #40	@ 0x28
 8000c82:	443b      	add	r3, r7
 8000c84:	f803 2c10 	strb.w	r2, [r3, #-16]
				num /= 10;
 8000c88:	88bb      	ldrh	r3, [r7, #4]
 8000c8a:	4a3e      	ldr	r2, [pc, #248]	@ (8000d84 <Lcd_ES_tdisplayNum+0x168>)
 8000c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c90:	08db      	lsrs	r3, r3, #3
 8000c92:	80bb      	strh	r3, [r7, #4]
				i++;
 8000c94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c98:	3301      	adds	r3, #1
 8000c9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			while(num)
 8000c9e:	88bb      	ldrh	r3, [r7, #4]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d1dd      	bne.n	8000c60 <Lcd_ES_tdisplayNum+0x44>
			for(j=i;j>0;j--)
 8000ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ca8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000cac:	e00f      	b.n	8000cce <Lcd_ES_tdisplayNum+0xb2>
				Lcd_ES_tsendChar(LCD_Instant_1,ch[j-1]);
 8000cae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	3328      	adds	r3, #40	@ 0x28
 8000cb6:	443b      	add	r3, r7
 8000cb8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f7ff fdf4 	bl	80008ac <Lcd_ES_tsendChar>
			for(j=i;j>0;j--)
 8000cc4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000cce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d1eb      	bne.n	8000cae <Lcd_ES_tdisplayNum+0x92>
		break;
 8000cd6:	e04e      	b.n	8000d76 <Lcd_ES_tdisplayNum+0x15a>
	}
	case LCD_Instant_2:
	{
		MCAL_GPIO_WritePin(LCD_2_CMD_PORT, RS_2, GPIO_PIN_HIGH);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2120      	movs	r1, #32
 8000cdc:	482a      	ldr	r0, [pc, #168]	@ (8000d88 <Lcd_ES_tdisplayNum+0x16c>)
 8000cde:	f001 f943 	bl	8001f68 <MCAL_GPIO_WritePin>

		uint8_t ch[10],i=0,j=0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		if(num == 0)
 8000cee:	88bb      	ldrh	r3, [r7, #4]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d123      	bne.n	8000d3c <Lcd_ES_tdisplayNum+0x120>
		{
			Lcd_ES_tsendChar(LCD_Instant_2,'0');
 8000cf4:	2130      	movs	r1, #48	@ 0x30
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	f7ff fdd8 	bl	80008ac <Lcd_ES_tsendChar>
			for(j=i;j>0;j--)
			{
				Lcd_ES_tsendChar(LCD_Instant_2,ch[j-1]);
			}
		}
		break;
 8000cfc:	e03a      	b.n	8000d74 <Lcd_ES_tdisplayNum+0x158>
				ch[i] = num % 10 + '0';  //To convert int to char
 8000cfe:	88ba      	ldrh	r2, [r7, #4]
 8000d00:	4b20      	ldr	r3, [pc, #128]	@ (8000d84 <Lcd_ES_tdisplayNum+0x168>)
 8000d02:	fba3 1302 	umull	r1, r3, r3, r2
 8000d06:	08d9      	lsrs	r1, r3, #3
 8000d08:	460b      	mov	r3, r1
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000d1a:	3230      	adds	r2, #48	@ 0x30
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	3328      	adds	r3, #40	@ 0x28
 8000d20:	443b      	add	r3, r7
 8000d22:	f803 2c1c 	strb.w	r2, [r3, #-28]
				num /= 10;
 8000d26:	88bb      	ldrh	r3, [r7, #4]
 8000d28:	4a16      	ldr	r2, [pc, #88]	@ (8000d84 <Lcd_ES_tdisplayNum+0x168>)
 8000d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d2e:	08db      	lsrs	r3, r3, #3
 8000d30:	80bb      	strh	r3, [r7, #4]
				i++;
 8000d32:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000d36:	3301      	adds	r3, #1
 8000d38:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			while(num)
 8000d3c:	88bb      	ldrh	r3, [r7, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d1dd      	bne.n	8000cfe <Lcd_ES_tdisplayNum+0xe2>
			for(j=i;j>0;j--)
 8000d42:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000d46:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8000d4a:	e00f      	b.n	8000d6c <Lcd_ES_tdisplayNum+0x150>
				Lcd_ES_tsendChar(LCD_Instant_2,ch[j-1]);
 8000d4c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000d50:	3b01      	subs	r3, #1
 8000d52:	3328      	adds	r3, #40	@ 0x28
 8000d54:	443b      	add	r3, r7
 8000d56:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f7ff fda5 	bl	80008ac <Lcd_ES_tsendChar>
			for(j=i;j>0;j--)
 8000d62:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000d66:	3b01      	subs	r3, #1
 8000d68:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8000d6c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d1eb      	bne.n	8000d4c <Lcd_ES_tdisplayNum+0x130>
		break;
 8000d74:	bf00      	nop
	}
	}



	return ES_OK;
 8000d76:	2300      	movs	r3, #0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3728      	adds	r7, #40	@ 0x28
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40010c00 	.word	0x40010c00
 8000d84:	cccccccd 	.word	0xcccccccd
 8000d88:	40010800 	.word	0x40010800

08000d8c <LCD_ES_tGoTo>:

	return ES_OK;
}

/************************************************************************/
ES_t LCD_ES_tGoTo(LCD_Instant instant, uint8_t Line, uint8_t x){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
 8000d96:	460b      	mov	r3, r1
 8000d98:	71bb      	strb	r3, [r7, #6]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	717b      	strb	r3, [r7, #5]


	switch(instant)
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d002      	beq.n	8000daa <LCD_ES_tGoTo+0x1e>
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d03a      	beq.n	8000e1e <LCD_ES_tGoTo+0x92>
 8000da8:	e076      	b.n	8000e98 <LCD_ES_tGoTo+0x10c>
	{
	case LCD_Instant_1:
	{
		if(0 == Line)
 8000daa:	79bb      	ldrb	r3, [r7, #6]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d10a      	bne.n	8000dc6 <LCD_ES_tGoTo+0x3a>
		{
			if ( x <=15)
 8000db0:	797b      	ldrb	r3, [r7, #5]
 8000db2:	2b0f      	cmp	r3, #15
 8000db4:	d86d      	bhi.n	8000e92 <LCD_ES_tGoTo+0x106>
			{
				Lcd_ES_tsendCmd(LCD_Instant_1,(0x80 + x));
 8000db6:	797b      	ldrb	r3, [r7, #5]
 8000db8:	3b80      	subs	r3, #128	@ 0x80
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f7ff fc06 	bl	80005d0 <Lcd_ES_tsendCmd>
				Lcd_ES_tsendCmd(LCD_Instant_1,(0xD0 + x));
			}
		}else{
			return ES_NOT_OK;
		}
		break;
 8000dc4:	e065      	b.n	8000e92 <LCD_ES_tGoTo+0x106>
		else if (1 == Line)
 8000dc6:	79bb      	ldrb	r3, [r7, #6]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d10a      	bne.n	8000de2 <LCD_ES_tGoTo+0x56>
			if ( x <=15)
 8000dcc:	797b      	ldrb	r3, [r7, #5]
 8000dce:	2b0f      	cmp	r3, #15
 8000dd0:	d85f      	bhi.n	8000e92 <LCD_ES_tGoTo+0x106>
				Lcd_ES_tsendCmd(LCD_Instant_1,(0xC0 + x));
 8000dd2:	797b      	ldrb	r3, [r7, #5]
 8000dd4:	3b40      	subs	r3, #64	@ 0x40
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	4619      	mov	r1, r3
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f7ff fbf8 	bl	80005d0 <Lcd_ES_tsendCmd>
		break;
 8000de0:	e057      	b.n	8000e92 <LCD_ES_tGoTo+0x106>
		else if(2 == Line)
 8000de2:	79bb      	ldrb	r3, [r7, #6]
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d10a      	bne.n	8000dfe <LCD_ES_tGoTo+0x72>
			if ( x <=15)
 8000de8:	797b      	ldrb	r3, [r7, #5]
 8000dea:	2b0f      	cmp	r3, #15
 8000dec:	d851      	bhi.n	8000e92 <LCD_ES_tGoTo+0x106>
				Lcd_ES_tsendCmd(LCD_Instant_1,(0x90 + x));
 8000dee:	797b      	ldrb	r3, [r7, #5]
 8000df0:	3b70      	subs	r3, #112	@ 0x70
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	4619      	mov	r1, r3
 8000df6:	2000      	movs	r0, #0
 8000df8:	f7ff fbea 	bl	80005d0 <Lcd_ES_tsendCmd>
		break;
 8000dfc:	e049      	b.n	8000e92 <LCD_ES_tGoTo+0x106>
		}else if(3 == Line)
 8000dfe:	79bb      	ldrb	r3, [r7, #6]
 8000e00:	2b03      	cmp	r3, #3
 8000e02:	d10a      	bne.n	8000e1a <LCD_ES_tGoTo+0x8e>
			if ( x <=15)
 8000e04:	797b      	ldrb	r3, [r7, #5]
 8000e06:	2b0f      	cmp	r3, #15
 8000e08:	d843      	bhi.n	8000e92 <LCD_ES_tGoTo+0x106>
				Lcd_ES_tsendCmd(LCD_Instant_1,(0xD0 + x));
 8000e0a:	797b      	ldrb	r3, [r7, #5]
 8000e0c:	3b30      	subs	r3, #48	@ 0x30
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	4619      	mov	r1, r3
 8000e12:	2000      	movs	r0, #0
 8000e14:	f7ff fbdc 	bl	80005d0 <Lcd_ES_tsendCmd>
		break;
 8000e18:	e03b      	b.n	8000e92 <LCD_ES_tGoTo+0x106>
			return ES_NOT_OK;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e03d      	b.n	8000e9a <LCD_ES_tGoTo+0x10e>
	}
	case LCD_Instant_2:
	{
		if(0 == Line)
 8000e1e:	79bb      	ldrb	r3, [r7, #6]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d10a      	bne.n	8000e3a <LCD_ES_tGoTo+0xae>
		{
			if ( x <=15)
 8000e24:	797b      	ldrb	r3, [r7, #5]
 8000e26:	2b0f      	cmp	r3, #15
 8000e28:	d835      	bhi.n	8000e96 <LCD_ES_tGoTo+0x10a>
			{
				Lcd_ES_tsendCmd(LCD_Instant_2,(0x80 + x));
 8000e2a:	797b      	ldrb	r3, [r7, #5]
 8000e2c:	3b80      	subs	r3, #128	@ 0x80
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	4619      	mov	r1, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	f7ff fbcc 	bl	80005d0 <Lcd_ES_tsendCmd>
				Lcd_ES_tsendCmd(LCD_Instant_2,(0xD0 + x));
			}
		}else{
			return ES_NOT_OK;
		}
		break;
 8000e38:	e02d      	b.n	8000e96 <LCD_ES_tGoTo+0x10a>
		else if (1 == Line)
 8000e3a:	79bb      	ldrb	r3, [r7, #6]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d10a      	bne.n	8000e56 <LCD_ES_tGoTo+0xca>
			if ( x <=15)
 8000e40:	797b      	ldrb	r3, [r7, #5]
 8000e42:	2b0f      	cmp	r3, #15
 8000e44:	d827      	bhi.n	8000e96 <LCD_ES_tGoTo+0x10a>
				Lcd_ES_tsendCmd(LCD_Instant_2,(0xC0 + x));
 8000e46:	797b      	ldrb	r3, [r7, #5]
 8000e48:	3b40      	subs	r3, #64	@ 0x40
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	f7ff fbbe 	bl	80005d0 <Lcd_ES_tsendCmd>
		break;
 8000e54:	e01f      	b.n	8000e96 <LCD_ES_tGoTo+0x10a>
		else if(2 == Line)
 8000e56:	79bb      	ldrb	r3, [r7, #6]
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d10a      	bne.n	8000e72 <LCD_ES_tGoTo+0xe6>
			if ( x <=15)
 8000e5c:	797b      	ldrb	r3, [r7, #5]
 8000e5e:	2b0f      	cmp	r3, #15
 8000e60:	d819      	bhi.n	8000e96 <LCD_ES_tGoTo+0x10a>
				Lcd_ES_tsendCmd(LCD_Instant_2,(0x90 + x));
 8000e62:	797b      	ldrb	r3, [r7, #5]
 8000e64:	3b70      	subs	r3, #112	@ 0x70
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	4619      	mov	r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f7ff fbb0 	bl	80005d0 <Lcd_ES_tsendCmd>
		break;
 8000e70:	e011      	b.n	8000e96 <LCD_ES_tGoTo+0x10a>
		}else if(3 == Line)
 8000e72:	79bb      	ldrb	r3, [r7, #6]
 8000e74:	2b03      	cmp	r3, #3
 8000e76:	d10a      	bne.n	8000e8e <LCD_ES_tGoTo+0x102>
			if ( x <=15)
 8000e78:	797b      	ldrb	r3, [r7, #5]
 8000e7a:	2b0f      	cmp	r3, #15
 8000e7c:	d80b      	bhi.n	8000e96 <LCD_ES_tGoTo+0x10a>
				Lcd_ES_tsendCmd(LCD_Instant_2,(0xD0 + x));
 8000e7e:	797b      	ldrb	r3, [r7, #5]
 8000e80:	3b30      	subs	r3, #48	@ 0x30
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	4619      	mov	r1, r3
 8000e86:	2001      	movs	r0, #1
 8000e88:	f7ff fba2 	bl	80005d0 <Lcd_ES_tsendCmd>
		break;
 8000e8c:	e003      	b.n	8000e96 <LCD_ES_tGoTo+0x10a>
			return ES_NOT_OK;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e003      	b.n	8000e9a <LCD_ES_tGoTo+0x10e>
		break;
 8000e92:	bf00      	nop
 8000e94:	e000      	b.n	8000e98 <LCD_ES_tGoTo+0x10c>
		break;
 8000e96:	bf00      	nop
	}




	return ES_OK;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <LED_Init>:




void LED_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t PinCfg;

	PinCfg.GPIO_PinNumber = R_LED;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 8000eae:	2304      	movs	r3, #4
 8000eb0:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LED_PORT, &PinCfg);
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	4619      	mov	r1, r3
 8000eba:	480f      	ldr	r0, [pc, #60]	@ (8000ef8 <LED_Init+0x54>)
 8000ebc:	f000 ffbe 	bl	8001e3c <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = G_LED;
 8000ec0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ec4:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LED_PORT, &PinCfg);
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4809      	ldr	r0, [pc, #36]	@ (8000ef8 <LED_Init+0x54>)
 8000ed4:	f000 ffb2 	bl	8001e3c <MCAL_GPIO_Init>


	// By default, they are off
	MCAL_GPIO_WritePin(LED_PORT, R_LED, GPIO_PIN_HIGH);
 8000ed8:	2201      	movs	r2, #1
 8000eda:	2101      	movs	r1, #1
 8000edc:	4806      	ldr	r0, [pc, #24]	@ (8000ef8 <LED_Init+0x54>)
 8000ede:	f001 f843 	bl	8001f68 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LED_PORT, G_LED, GPIO_PIN_HIGH);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ee8:	4803      	ldr	r0, [pc, #12]	@ (8000ef8 <LED_Init+0x54>)
 8000eea:	f001 f83d 	bl	8001f68 <MCAL_GPIO_WritePin>


}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40010800 	.word	0x40010800

08000efc <LED_ON>:


// LEDs are connected normally to VCC, so they need a GND to work

void LED_ON(uint32_t LED)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	switch(LED)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d004      	beq.n	8000f14 <LED_ON+0x18>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000f10:	d006      	beq.n	8000f20 <LED_ON+0x24>
	{
		MCAL_GPIO_WritePin(LED_PORT, G_LED, GPIO_PIN_LOW);
		break;
	}
	}
}
 8000f12:	e00c      	b.n	8000f2e <LED_ON+0x32>
		MCAL_GPIO_WritePin(LED_PORT, R_LED, GPIO_PIN_LOW);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2101      	movs	r1, #1
 8000f18:	4807      	ldr	r0, [pc, #28]	@ (8000f38 <LED_ON+0x3c>)
 8000f1a:	f001 f825 	bl	8001f68 <MCAL_GPIO_WritePin>
		break;
 8000f1e:	e006      	b.n	8000f2e <LED_ON+0x32>
		MCAL_GPIO_WritePin(LED_PORT, G_LED, GPIO_PIN_LOW);
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f26:	4804      	ldr	r0, [pc, #16]	@ (8000f38 <LED_ON+0x3c>)
 8000f28:	f001 f81e 	bl	8001f68 <MCAL_GPIO_WritePin>
		break;
 8000f2c:	bf00      	nop
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40010800 	.word	0x40010800

08000f3c <LED_OFF>:



void LED_OFF(uint32_t LED)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	switch(LED)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d004      	beq.n	8000f54 <LED_OFF+0x18>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000f50:	d006      	beq.n	8000f60 <LED_OFF+0x24>
	{
		MCAL_GPIO_WritePin(LED_PORT, G_LED, GPIO_PIN_HIGH);
		break;
	}
	}
}
 8000f52:	e00c      	b.n	8000f6e <LED_OFF+0x32>
		MCAL_GPIO_WritePin(LED_PORT, R_LED, GPIO_PIN_HIGH);
 8000f54:	2201      	movs	r2, #1
 8000f56:	2101      	movs	r1, #1
 8000f58:	4807      	ldr	r0, [pc, #28]	@ (8000f78 <LED_OFF+0x3c>)
 8000f5a:	f001 f805 	bl	8001f68 <MCAL_GPIO_WritePin>
		break;
 8000f5e:	e006      	b.n	8000f6e <LED_OFF+0x32>
		MCAL_GPIO_WritePin(LED_PORT, G_LED, GPIO_PIN_HIGH);
 8000f60:	2201      	movs	r2, #1
 8000f62:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f66:	4804      	ldr	r0, [pc, #16]	@ (8000f78 <LED_OFF+0x3c>)
 8000f68:	f000 fffe 	bl	8001f68 <MCAL_GPIO_WritePin>
		break;
 8000f6c:	bf00      	nop
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40010800 	.word	0x40010800

08000f7c <PIR_Init>:
#include "PIR.h"



void PIR_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0

	GPIO_PinConfig_t PinCfg;

	PinCfg.GPIO_PinNumber = PIR_1;
 8000f82:	2380      	movs	r3, #128	@ 0x80
 8000f84:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_PULLDOWN;
 8000f86:	2303      	movs	r3, #3
 8000f88:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(PIR_PORT, &PinCfg);
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4808      	ldr	r0, [pc, #32]	@ (8000fb0 <PIR_Init+0x34>)
 8000f90:	f000 ff54 	bl	8001e3c <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = PIR_2;
 8000f94:	2302      	movs	r3, #2
 8000f96:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_PULLDOWN;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(PIR_PORT, &PinCfg);
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4803      	ldr	r0, [pc, #12]	@ (8000fb0 <PIR_Init+0x34>)
 8000fa2:	f000 ff4b 	bl	8001e3c <MCAL_GPIO_Init>

}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40010800 	.word	0x40010800

08000fb4 <PIR_Read>:




void PIR_Read(uint16_t PIR, uint8_t *pir_reading)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	80fb      	strh	r3, [r7, #6]

	switch(PIR)
 8000fc0:	88fb      	ldrh	r3, [r7, #6]
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d010      	beq.n	8000fe8 <PIR_Read+0x34>
 8000fc6:	2b80      	cmp	r3, #128	@ 0x80
 8000fc8:	d11d      	bne.n	8001006 <PIR_Read+0x52>
	{
	case PIR_1:
	{
		if(MCAL_GPIO_ReadPin(PIR_PORT, PIR_1) == GPIO_PIN_HIGH)
 8000fca:	2180      	movs	r1, #128	@ 0x80
 8000fcc:	4810      	ldr	r0, [pc, #64]	@ (8001010 <PIR_Read+0x5c>)
 8000fce:	f000 ffb4 	bl	8001f3a <MCAL_GPIO_ReadPin>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d103      	bne.n	8000fe0 <PIR_Read+0x2c>
		{
			*pir_reading = GPIO_PIN_HIGH;
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	701a      	strb	r2, [r3, #0]
		}else{
			*pir_reading = GPIO_PIN_LOW;
		}
		break;
 8000fde:	e012      	b.n	8001006 <PIR_Read+0x52>
			*pir_reading = GPIO_PIN_LOW;
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
		break;
 8000fe6:	e00e      	b.n	8001006 <PIR_Read+0x52>
	}
	case PIR_2:
	{
		if(MCAL_GPIO_ReadPin(PIR_PORT, PIR_2) == GPIO_PIN_HIGH)
 8000fe8:	2102      	movs	r1, #2
 8000fea:	4809      	ldr	r0, [pc, #36]	@ (8001010 <PIR_Read+0x5c>)
 8000fec:	f000 ffa5 	bl	8001f3a <MCAL_GPIO_ReadPin>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d103      	bne.n	8000ffe <PIR_Read+0x4a>
		{
			*pir_reading = GPIO_PIN_HIGH;
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	701a      	strb	r2, [r3, #0]
		}else{
			*pir_reading = GPIO_PIN_LOW;
		}
		break;
 8000ffc:	e002      	b.n	8001004 <PIR_Read+0x50>
			*pir_reading = GPIO_PIN_LOW;
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
		break;
 8001004:	bf00      	nop
	}
	}
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40010800 	.word	0x40010800

08001014 <Servo_Init>:

#include "Servo.h"


void Servo_Init(Servo_Index servo)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
	GPIO_PinConfig_t PinCfg;

	switch(servo)
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d002      	beq.n	800102a <Servo_Init+0x16>
 8001024:	2b01      	cmp	r3, #1
 8001026:	d00e      	beq.n	8001046 <Servo_Init+0x32>
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
		MCAL_GPIO_Init(SERVO_PORT, &PinCfg);
		break;
	}
	}
}
 8001028:	e01b      	b.n	8001062 <Servo_Init+0x4e>
		PinCfg.GPIO_PinNumber = SERVO_ENTRY_PIN;
 800102a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800102e:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 8001030:	2304      	movs	r3, #4
 8001032:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8001034:	2301      	movs	r3, #1
 8001036:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(SERVO_PORT, &PinCfg);
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	4619      	mov	r1, r3
 800103e:	480b      	ldr	r0, [pc, #44]	@ (800106c <Servo_Init+0x58>)
 8001040:	f000 fefc 	bl	8001e3c <MCAL_GPIO_Init>
		break;
 8001044:	e00d      	b.n	8001062 <Servo_Init+0x4e>
		PinCfg.GPIO_PinNumber = SERVO_EXIT_PIN;
 8001046:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800104a:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 800104c:	2304      	movs	r3, #4
 800104e:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8001050:	2301      	movs	r3, #1
 8001052:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(SERVO_PORT, &PinCfg);
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	4619      	mov	r1, r3
 800105a:	4804      	ldr	r0, [pc, #16]	@ (800106c <Servo_Init+0x58>)
 800105c:	f000 feee 	bl	8001e3c <MCAL_GPIO_Init>
		break;
 8001060:	bf00      	nop
}
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40010c00 	.word	0x40010c00

08001070 <Servo_Move>:

// Back to zero --> 1.5ms
// go to 90 --> 2ms

void Servo_Move(Servo_Index servo, Servo_Direction dir)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	460a      	mov	r2, r1
 800107a:	71fb      	strb	r3, [r7, #7]
 800107c:	4613      	mov	r3, r2
 800107e:	71bb      	strb	r3, [r7, #6]
	switch(servo)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d002      	beq.n	800108c <Servo_Move+0x1c>
 8001086:	2b01      	cmp	r3, #1
 8001088:	d025      	beq.n	80010d6 <Servo_Move+0x66>
		}

		break;
	}
	}
}
 800108a:	e049      	b.n	8001120 <Servo_Move+0xb0>
		if(dir == UP)
 800108c:	79bb      	ldrb	r3, [r7, #6]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d110      	bne.n	80010b4 <Servo_Move+0x44>
			MCAL_GPIO_WritePin(SERVO_PORT, SERVO_ENTRY_PIN, GPIO_PIN_HIGH);
 8001092:	2201      	movs	r2, #1
 8001094:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001098:	4823      	ldr	r0, [pc, #140]	@ (8001128 <Servo_Move+0xb8>)
 800109a:	f000 ff65 	bl	8001f68 <MCAL_GPIO_WritePin>
			Delay_us(2000);
 800109e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010a2:	f000 fffd 	bl	80020a0 <Delay_us>
			MCAL_GPIO_WritePin(SERVO_PORT, SERVO_ENTRY_PIN, GPIO_PIN_LOW);
 80010a6:	2200      	movs	r2, #0
 80010a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010ac:	481e      	ldr	r0, [pc, #120]	@ (8001128 <Servo_Move+0xb8>)
 80010ae:	f000 ff5b 	bl	8001f68 <MCAL_GPIO_WritePin>
		break;
 80010b2:	e035      	b.n	8001120 <Servo_Move+0xb0>
			MCAL_GPIO_WritePin(SERVO_PORT, SERVO_ENTRY_PIN, GPIO_PIN_HIGH);
 80010b4:	2201      	movs	r2, #1
 80010b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010ba:	481b      	ldr	r0, [pc, #108]	@ (8001128 <Servo_Move+0xb8>)
 80010bc:	f000 ff54 	bl	8001f68 <MCAL_GPIO_WritePin>
			Delay_us(1487);
 80010c0:	f240 50cf 	movw	r0, #1487	@ 0x5cf
 80010c4:	f000 ffec 	bl	80020a0 <Delay_us>
			MCAL_GPIO_WritePin(SERVO_PORT, SERVO_ENTRY_PIN, GPIO_PIN_LOW);
 80010c8:	2200      	movs	r2, #0
 80010ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010ce:	4816      	ldr	r0, [pc, #88]	@ (8001128 <Servo_Move+0xb8>)
 80010d0:	f000 ff4a 	bl	8001f68 <MCAL_GPIO_WritePin>
		break;
 80010d4:	e024      	b.n	8001120 <Servo_Move+0xb0>
		if(dir == UP)
 80010d6:	79bb      	ldrb	r3, [r7, #6]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d110      	bne.n	80010fe <Servo_Move+0x8e>
			MCAL_GPIO_WritePin(SERVO_PORT, SERVO_EXIT_PIN, GPIO_PIN_HIGH);
 80010dc:	2201      	movs	r2, #1
 80010de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010e2:	4811      	ldr	r0, [pc, #68]	@ (8001128 <Servo_Move+0xb8>)
 80010e4:	f000 ff40 	bl	8001f68 <MCAL_GPIO_WritePin>
			Delay_us(2000);
 80010e8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010ec:	f000 ffd8 	bl	80020a0 <Delay_us>
			MCAL_GPIO_WritePin(SERVO_PORT, SERVO_EXIT_PIN, GPIO_PIN_LOW);
 80010f0:	2200      	movs	r2, #0
 80010f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010f6:	480c      	ldr	r0, [pc, #48]	@ (8001128 <Servo_Move+0xb8>)
 80010f8:	f000 ff36 	bl	8001f68 <MCAL_GPIO_WritePin>
		break;
 80010fc:	e00f      	b.n	800111e <Servo_Move+0xae>
			MCAL_GPIO_WritePin(SERVO_PORT, SERVO_EXIT_PIN, GPIO_PIN_HIGH);
 80010fe:	2201      	movs	r2, #1
 8001100:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001104:	4808      	ldr	r0, [pc, #32]	@ (8001128 <Servo_Move+0xb8>)
 8001106:	f000 ff2f 	bl	8001f68 <MCAL_GPIO_WritePin>
			Delay_us(1487);
 800110a:	f240 50cf 	movw	r0, #1487	@ 0x5cf
 800110e:	f000 ffc7 	bl	80020a0 <Delay_us>
			MCAL_GPIO_WritePin(SERVO_PORT, SERVO_EXIT_PIN, GPIO_PIN_LOW);
 8001112:	2200      	movs	r2, #0
 8001114:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001118:	4803      	ldr	r0, [pc, #12]	@ (8001128 <Servo_Move+0xb8>)
 800111a:	f000 ff25 	bl	8001f68 <MCAL_GPIO_WritePin>
		break;
 800111e:	bf00      	nop
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40010c00 	.word	0x40010c00

0800112c <clearArray>:

uint8_t EntryCard[4]={0},ExitCard[4]={0};


void clearArray(uint8_t arr[], uint8_t size)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i=0;i<size;i++){
 8001138:	2300      	movs	r3, #0
 800113a:	73fb      	strb	r3, [r7, #15]
 800113c:	e007      	b.n	800114e <clearArray+0x22>
		arr[i] = 0;
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	4413      	add	r3, r2
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0;i<size;i++){
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	3301      	adds	r3, #1
 800114c:	73fb      	strb	r3, [r7, #15]
 800114e:	7bfa      	ldrb	r2, [r7, #15]
 8001150:	78fb      	ldrb	r3, [r7, #3]
 8001152:	429a      	cmp	r2, r3
 8001154:	d3f3      	bcc.n	800113e <clearArray+0x12>
	}
}
 8001156:	bf00      	nop
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
	...

08001164 <ShowIDs>:


void ShowIDs(uint8_t arr[][5], uint8_t row)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	460b      	mov	r3, r1
 800116e:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i=0;i<row;i++){
 8001170:	2300      	movs	r3, #0
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	e01c      	b.n	80011b0 <ShowIDs+0x4c>
		LCD_ES_tGoTo(ADMIN_LCD, i, 0);
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	2200      	movs	r2, #0
 800117a:	4619      	mov	r1, r3
 800117c:	2000      	movs	r0, #0
 800117e:	f7ff fe05 	bl	8000d8c <LCD_ES_tGoTo>
		Lcd_ES_tdisplayNum(ADMIN_LCD, i);
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	b29b      	uxth	r3, r3
 8001186:	4619      	mov	r1, r3
 8001188:	2000      	movs	r0, #0
 800118a:	f7ff fd47 	bl	8000c1c <Lcd_ES_tdisplayNum>
		Lcd_ES_tsendString(ADMIN_LCD, "- ");
 800118e:	490d      	ldr	r1, [pc, #52]	@ (80011c4 <ShowIDs+0x60>)
 8001190:	2000      	movs	r0, #0
 8001192:	f7ff fcf9 	bl	8000b88 <Lcd_ES_tsendString>
		Lcd_ES_tsendString(ADMIN_LCD, arr[i]);
 8001196:	7bfa      	ldrb	r2, [r7, #15]
 8001198:	4613      	mov	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	4619      	mov	r1, r3
 80011a4:	2000      	movs	r0, #0
 80011a6:	f7ff fcef 	bl	8000b88 <Lcd_ES_tsendString>
	for(uint8_t i=0;i<row;i++){
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	3301      	adds	r3, #1
 80011ae:	73fb      	strb	r3, [r7, #15]
 80011b0:	7bfa      	ldrb	r2, [r7, #15]
 80011b2:	78fb      	ldrb	r3, [r7, #3]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d3de      	bcc.n	8001176 <ShowIDs+0x12>
	}
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	08002554 	.word	0x08002554

080011c8 <CompareWithDataBase>:


// Comparing between the passed card and the database

uint8_t CompareWithDataBase(uint8_t EnteredCard[],uint8_t arr[][5])
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
	uint8_t i=0,j=0,counter=0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	73fb      	strb	r3, [r7, #15]
 80011d6:	2300      	movs	r3, #0
 80011d8:	73bb      	strb	r3, [r7, #14]
 80011da:	2300      	movs	r3, #0
 80011dc:	737b      	strb	r3, [r7, #13]
	while(j<4){
 80011de:	e01c      	b.n	800121a <CompareWithDataBase+0x52>
		for(i=0;i<4;i++){
 80011e0:	2300      	movs	r3, #0
 80011e2:	73fb      	strb	r3, [r7, #15]
 80011e4:	e013      	b.n	800120e <CompareWithDataBase+0x46>
			if(EnteredCard[i]==arr[j][i]){
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	4413      	add	r3, r2
 80011ec:	7819      	ldrb	r1, [r3, #0]
 80011ee:	7bba      	ldrb	r2, [r7, #14]
 80011f0:	4613      	mov	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	441a      	add	r2, r3
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	5cd3      	ldrb	r3, [r2, r3]
 80011fe:	4299      	cmp	r1, r3
 8001200:	d102      	bne.n	8001208 <CompareWithDataBase+0x40>
				counter++;
 8001202:	7b7b      	ldrb	r3, [r7, #13]
 8001204:	3301      	adds	r3, #1
 8001206:	737b      	strb	r3, [r7, #13]
		for(i=0;i<4;i++){
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	3301      	adds	r3, #1
 800120c:	73fb      	strb	r3, [r7, #15]
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	2b03      	cmp	r3, #3
 8001212:	d9e8      	bls.n	80011e6 <CompareWithDataBase+0x1e>
			}
		}

		//		counter = 0;
		j++;
 8001214:	7bbb      	ldrb	r3, [r7, #14]
 8001216:	3301      	adds	r3, #1
 8001218:	73bb      	strb	r3, [r7, #14]
	while(j<4){
 800121a:	7bbb      	ldrb	r3, [r7, #14]
 800121c:	2b03      	cmp	r3, #3
 800121e:	d9df      	bls.n	80011e0 <CompareWithDataBase+0x18>
	}
	if((counter%4 == 0) && (counter!=0)){
 8001220:	7b7b      	ldrb	r3, [r7, #13]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	b2db      	uxtb	r3, r3
 8001228:	2b00      	cmp	r3, #0
 800122a:	d104      	bne.n	8001236 <CompareWithDataBase+0x6e>
 800122c:	7b7b      	ldrb	r3, [r7, #13]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <CompareWithDataBase+0x6e>
		return 1;
 8001232:	2301      	movs	r3, #1
 8001234:	e000      	b.n	8001238 <CompareWithDataBase+0x70>
	}else{
		return 0;
 8001236:	2300      	movs	r3, #0
	}
}
 8001238:	4618      	mov	r0, r3
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
	...

08001244 <UART_RecieverEntry_CallBack>:

uint8_t gettingOption = 0,userDisplayed = 0,adminDisplayed = 0;


void UART_RecieverEntry_CallBack(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
	LED_OFF(G_LED);
 8001248:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800124c:	f7ff fe76 	bl	8000f3c <LED_OFF>
	LED_OFF(R_LED);
 8001250:	2001      	movs	r0, #1
 8001252:	f7ff fe73 	bl	8000f3c <LED_OFF>
	if(EntryCounter==0){
 8001256:	4b61      	ldr	r3, [pc, #388]	@ (80013dc <UART_RecieverEntry_CallBack+0x198>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b00      	cmp	r3, #0
 800125e:	d10c      	bne.n	800127a <UART_RecieverEntry_CallBack+0x36>
		MCAL_UART_ReceiveData(RFID_Entry_USART, &temp_EntryCard[0], Disable);EntryCounter++;}
 8001260:	2200      	movs	r2, #0
 8001262:	495f      	ldr	r1, [pc, #380]	@ (80013e0 <UART_RecieverEntry_CallBack+0x19c>)
 8001264:	485f      	ldr	r0, [pc, #380]	@ (80013e4 <UART_RecieverEntry_CallBack+0x1a0>)
 8001266:	f001 f889 	bl	800237c <MCAL_UART_ReceiveData>
 800126a:	4b5c      	ldr	r3, [pc, #368]	@ (80013dc <UART_RecieverEntry_CallBack+0x198>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	3301      	adds	r3, #1
 8001272:	b2da      	uxtb	r2, r3
 8001274:	4b59      	ldr	r3, [pc, #356]	@ (80013dc <UART_RecieverEntry_CallBack+0x198>)
 8001276:	701a      	strb	r2, [r3, #0]
 8001278:	e09f      	b.n	80013ba <UART_RecieverEntry_CallBack+0x176>
	else if(EntryCounter==1){
 800127a:	4b58      	ldr	r3, [pc, #352]	@ (80013dc <UART_RecieverEntry_CallBack+0x198>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	b2db      	uxtb	r3, r3
 8001280:	2b01      	cmp	r3, #1
 8001282:	d10c      	bne.n	800129e <UART_RecieverEntry_CallBack+0x5a>
		MCAL_UART_ReceiveData(RFID_Entry_USART, &temp_EntryCard[1], Disable);EntryCounter++;}
 8001284:	2200      	movs	r2, #0
 8001286:	4958      	ldr	r1, [pc, #352]	@ (80013e8 <UART_RecieverEntry_CallBack+0x1a4>)
 8001288:	4856      	ldr	r0, [pc, #344]	@ (80013e4 <UART_RecieverEntry_CallBack+0x1a0>)
 800128a:	f001 f877 	bl	800237c <MCAL_UART_ReceiveData>
 800128e:	4b53      	ldr	r3, [pc, #332]	@ (80013dc <UART_RecieverEntry_CallBack+0x198>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	3301      	adds	r3, #1
 8001296:	b2da      	uxtb	r2, r3
 8001298:	4b50      	ldr	r3, [pc, #320]	@ (80013dc <UART_RecieverEntry_CallBack+0x198>)
 800129a:	701a      	strb	r2, [r3, #0]
 800129c:	e08d      	b.n	80013ba <UART_RecieverEntry_CallBack+0x176>
	else if(EntryCounter==2){
 800129e:	4b4f      	ldr	r3, [pc, #316]	@ (80013dc <UART_RecieverEntry_CallBack+0x198>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d10c      	bne.n	80012c2 <UART_RecieverEntry_CallBack+0x7e>
		MCAL_UART_ReceiveData(RFID_Entry_USART, &temp_EntryCard[2], Disable);EntryCounter++;}
 80012a8:	2200      	movs	r2, #0
 80012aa:	4950      	ldr	r1, [pc, #320]	@ (80013ec <UART_RecieverEntry_CallBack+0x1a8>)
 80012ac:	484d      	ldr	r0, [pc, #308]	@ (80013e4 <UART_RecieverEntry_CallBack+0x1a0>)
 80012ae:	f001 f865 	bl	800237c <MCAL_UART_ReceiveData>
 80012b2:	4b4a      	ldr	r3, [pc, #296]	@ (80013dc <UART_RecieverEntry_CallBack+0x198>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	3301      	adds	r3, #1
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	4b47      	ldr	r3, [pc, #284]	@ (80013dc <UART_RecieverEntry_CallBack+0x198>)
 80012be:	701a      	strb	r2, [r3, #0]
 80012c0:	e07b      	b.n	80013ba <UART_RecieverEntry_CallBack+0x176>
	else if(EntryCounter==3){
 80012c2:	4b46      	ldr	r3, [pc, #280]	@ (80013dc <UART_RecieverEntry_CallBack+0x198>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b03      	cmp	r3, #3
 80012ca:	d10c      	bne.n	80012e6 <UART_RecieverEntry_CallBack+0xa2>
		MCAL_UART_ReceiveData(RFID_Entry_USART, &temp_EntryCard[3], Disable);EntryCounter++;}
 80012cc:	2200      	movs	r2, #0
 80012ce:	4948      	ldr	r1, [pc, #288]	@ (80013f0 <UART_RecieverEntry_CallBack+0x1ac>)
 80012d0:	4844      	ldr	r0, [pc, #272]	@ (80013e4 <UART_RecieverEntry_CallBack+0x1a0>)
 80012d2:	f001 f853 	bl	800237c <MCAL_UART_ReceiveData>
 80012d6:	4b41      	ldr	r3, [pc, #260]	@ (80013dc <UART_RecieverEntry_CallBack+0x198>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	3301      	adds	r3, #1
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	4b3e      	ldr	r3, [pc, #248]	@ (80013dc <UART_RecieverEntry_CallBack+0x198>)
 80012e2:	701a      	strb	r2, [r3, #0]
 80012e4:	e069      	b.n	80013ba <UART_RecieverEntry_CallBack+0x176>
	else if(EntryCounter==4){
 80012e6:	4b3d      	ldr	r3, [pc, #244]	@ (80013dc <UART_RecieverEntry_CallBack+0x198>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	d161      	bne.n	80013b4 <UART_RecieverEntry_CallBack+0x170>
		temp_EntryCard[4] = '\0';
 80012f0:	4b3b      	ldr	r3, [pc, #236]	@ (80013e0 <UART_RecieverEntry_CallBack+0x19c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	711a      	strb	r2, [r3, #4]
		MCAL_UART_ReceiveData(RFID_Entry_USART, &dump, Disable);
 80012f6:	2200      	movs	r2, #0
 80012f8:	493e      	ldr	r1, [pc, #248]	@ (80013f4 <UART_RecieverEntry_CallBack+0x1b0>)
 80012fa:	483a      	ldr	r0, [pc, #232]	@ (80013e4 <UART_RecieverEntry_CallBack+0x1a0>)
 80012fc:	f001 f83e 	bl	800237c <MCAL_UART_ReceiveData>
		EntryCounter=0;
 8001300:	4b36      	ldr	r3, [pc, #216]	@ (80013dc <UART_RecieverEntry_CallBack+0x198>)
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]
		EntryReceived=1;
 8001306:	4b3c      	ldr	r3, [pc, #240]	@ (80013f8 <UART_RecieverEntry_CallBack+0x1b4>)
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
		MCAL_UART_SendString(RFID_Entry_USART, "Your ID: ", Enable);
 800130c:	2201      	movs	r2, #1
 800130e:	493b      	ldr	r1, [pc, #236]	@ (80013fc <UART_RecieverEntry_CallBack+0x1b8>)
 8001310:	4834      	ldr	r0, [pc, #208]	@ (80013e4 <UART_RecieverEntry_CallBack+0x1a0>)
 8001312:	f001 f80a 	bl	800232a <MCAL_UART_SendString>
		MCAL_UART_SendString(RFID_Entry_USART, temp_EntryCard, Enable);
 8001316:	2201      	movs	r2, #1
 8001318:	4931      	ldr	r1, [pc, #196]	@ (80013e0 <UART_RecieverEntry_CallBack+0x19c>)
 800131a:	4832      	ldr	r0, [pc, #200]	@ (80013e4 <UART_RecieverEntry_CallBack+0x1a0>)
 800131c:	f001 f805 	bl	800232a <MCAL_UART_SendString>
		if(CompareWithDataBase(temp_EntryCard,AllowedIDs)){
 8001320:	4937      	ldr	r1, [pc, #220]	@ (8001400 <UART_RecieverEntry_CallBack+0x1bc>)
 8001322:	482f      	ldr	r0, [pc, #188]	@ (80013e0 <UART_RecieverEntry_CallBack+0x19c>)
 8001324:	f7ff ff50 	bl	80011c8 <CompareWithDataBase>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d033      	beq.n	8001396 <UART_RecieverEntry_CallBack+0x152>
			if(availableSlots>0)
 800132e:	4b35      	ldr	r3, [pc, #212]	@ (8001404 <UART_RecieverEntry_CallBack+0x1c0>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	d006      	beq.n	8001346 <UART_RecieverEntry_CallBack+0x102>
				availableSlots--;
 8001338:	4b32      	ldr	r3, [pc, #200]	@ (8001404 <UART_RecieverEntry_CallBack+0x1c0>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	b2db      	uxtb	r3, r3
 800133e:	3b01      	subs	r3, #1
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4b30      	ldr	r3, [pc, #192]	@ (8001404 <UART_RecieverEntry_CallBack+0x1c0>)
 8001344:	701a      	strb	r2, [r3, #0]
			lcd_ES_tclear(USER_LCD);
 8001346:	2001      	movs	r0, #1
 8001348:	f7ff f925 	bl	8000596 <lcd_ES_tclear>
			Lcd_ES_tsendString(USER_LCD, "Eligible ID");
 800134c:	492e      	ldr	r1, [pc, #184]	@ (8001408 <UART_RecieverEntry_CallBack+0x1c4>)
 800134e:	2001      	movs	r0, #1
 8001350:	f7ff fc1a 	bl	8000b88 <Lcd_ES_tsendString>
			LED_ON(G_LED);
 8001354:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001358:	f7ff fdd0 	bl	8000efc <LED_ON>
			Servo_Move(Servo_Entry, UP);
 800135c:	2101      	movs	r1, #1
 800135e:	2000      	movs	r0, #0
 8001360:	f7ff fe86 	bl	8001070 <Servo_Move>
			PIR_Read(PIR_1, &PIR1_Reading);
 8001364:	4929      	ldr	r1, [pc, #164]	@ (800140c <UART_RecieverEntry_CallBack+0x1c8>)
 8001366:	2080      	movs	r0, #128	@ 0x80
 8001368:	f7ff fe24 	bl	8000fb4 <PIR_Read>
			while(PIR1_Reading){
 800136c:	e006      	b.n	800137c <UART_RecieverEntry_CallBack+0x138>
				PIR_Read(PIR_1, &PIR1_Reading);
 800136e:	4927      	ldr	r1, [pc, #156]	@ (800140c <UART_RecieverEntry_CallBack+0x1c8>)
 8001370:	2080      	movs	r0, #128	@ 0x80
 8001372:	f7ff fe1f 	bl	8000fb4 <PIR_Read>
				Delay_ms(3);
 8001376:	2003      	movs	r0, #3
 8001378:	f000 fea7 	bl	80020ca <Delay_ms>
			while(PIR1_Reading){
 800137c:	4b23      	ldr	r3, [pc, #140]	@ (800140c <UART_RecieverEntry_CallBack+0x1c8>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1f4      	bne.n	800136e <UART_RecieverEntry_CallBack+0x12a>
			}
			Servo_Move(Servo_Entry, DOWN);
 8001384:	2100      	movs	r1, #0
 8001386:	2000      	movs	r0, #0
 8001388:	f7ff fe72 	bl	8001070 <Servo_Move>
			LED_OFF(G_LED);
 800138c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001390:	f7ff fdd4 	bl	8000f3c <LED_OFF>
 8001394:	e009      	b.n	80013aa <UART_RecieverEntry_CallBack+0x166>
		}else{
			lcd_ES_tclear(USER_LCD);
 8001396:	2001      	movs	r0, #1
 8001398:	f7ff f8fd 	bl	8000596 <lcd_ES_tclear>
			Lcd_ES_tsendString(USER_LCD, "Unregistered ID");
 800139c:	491c      	ldr	r1, [pc, #112]	@ (8001410 <UART_RecieverEntry_CallBack+0x1cc>)
 800139e:	2001      	movs	r0, #1
 80013a0:	f7ff fbf2 	bl	8000b88 <Lcd_ES_tsendString>
			LED_ON(R_LED);
 80013a4:	2001      	movs	r0, #1
 80013a6:	f7ff fda9 	bl	8000efc <LED_ON>
		}
		clearArray(temp_EntryCard,5);
 80013aa:	2105      	movs	r1, #5
 80013ac:	480c      	ldr	r0, [pc, #48]	@ (80013e0 <UART_RecieverEntry_CallBack+0x19c>)
 80013ae:	f7ff febd 	bl	800112c <clearArray>
 80013b2:	e002      	b.n	80013ba <UART_RecieverEntry_CallBack+0x176>
	}else{
		EntryCounter=-1;
 80013b4:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <UART_RecieverEntry_CallBack+0x198>)
 80013b6:	22ff      	movs	r2, #255	@ 0xff
 80013b8:	701a      	strb	r2, [r3, #0]
	}
	gettingOption = 0;
 80013ba:	4b16      	ldr	r3, [pc, #88]	@ (8001414 <UART_RecieverEntry_CallBack+0x1d0>)
 80013bc:	2200      	movs	r2, #0
 80013be:	701a      	strb	r2, [r3, #0]
	userDisplayed = 0;
 80013c0:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <UART_RecieverEntry_CallBack+0x1d4>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	701a      	strb	r2, [r3, #0]
	adminDisplayed = 0;
 80013c6:	4b15      	ldr	r3, [pc, #84]	@ (800141c <UART_RecieverEntry_CallBack+0x1d8>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]
	lcd_ES_tclear(USER_LCD);
 80013cc:	2001      	movs	r0, #1
 80013ce:	f7ff f8e2 	bl	8000596 <lcd_ES_tclear>
	currentState = ADMIN_OPTIONS;
 80013d2:	4b13      	ldr	r3, [pc, #76]	@ (8001420 <UART_RecieverEntry_CallBack+0x1dc>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	701a      	strb	r2, [r3, #0]
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	2000003b 	.word	0x2000003b
 80013e0:	20000040 	.word	0x20000040
 80013e4:	40013800 	.word	0x40013800
 80013e8:	20000041 	.word	0x20000041
 80013ec:	20000042 	.word	0x20000042
 80013f0:	20000043 	.word	0x20000043
 80013f4:	20000038 	.word	0x20000038
 80013f8:	20000039 	.word	0x20000039
 80013fc:	08002558 	.word	0x08002558
 8001400:	20000024 	.word	0x20000024
 8001404:	20000000 	.word	0x20000000
 8001408:	08002564 	.word	0x08002564
 800140c:	20000021 	.word	0x20000021
 8001410:	08002570 	.word	0x08002570
 8001414:	2000004f 	.word	0x2000004f
 8001418:	20000050 	.word	0x20000050
 800141c:	20000051 	.word	0x20000051
 8001420:	2000004e 	.word	0x2000004e

08001424 <UART_RecieverExit_CallBack>:




void UART_RecieverExit_CallBack(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	if(ExitCounter==0){
 8001428:	4b5b      	ldr	r3, [pc, #364]	@ (8001598 <UART_RecieverExit_CallBack+0x174>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d10c      	bne.n	800144c <UART_RecieverExit_CallBack+0x28>
		MCAL_UART_ReceiveData(RFID_Exit_USART, &temp_ExitCard[0], Disable);ExitCounter++;}
 8001432:	2200      	movs	r2, #0
 8001434:	4959      	ldr	r1, [pc, #356]	@ (800159c <UART_RecieverExit_CallBack+0x178>)
 8001436:	485a      	ldr	r0, [pc, #360]	@ (80015a0 <UART_RecieverExit_CallBack+0x17c>)
 8001438:	f000 ffa0 	bl	800237c <MCAL_UART_ReceiveData>
 800143c:	4b56      	ldr	r3, [pc, #344]	@ (8001598 <UART_RecieverExit_CallBack+0x174>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	b2db      	uxtb	r3, r3
 8001442:	3301      	adds	r3, #1
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4b54      	ldr	r3, [pc, #336]	@ (8001598 <UART_RecieverExit_CallBack+0x174>)
 8001448:	701a      	strb	r2, [r3, #0]
 800144a:	e094      	b.n	8001576 <UART_RecieverExit_CallBack+0x152>
	else if(ExitCounter==1){
 800144c:	4b52      	ldr	r3, [pc, #328]	@ (8001598 <UART_RecieverExit_CallBack+0x174>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b01      	cmp	r3, #1
 8001454:	d10c      	bne.n	8001470 <UART_RecieverExit_CallBack+0x4c>
		MCAL_UART_ReceiveData(RFID_Exit_USART, &temp_ExitCard[1], Disable);ExitCounter++;}
 8001456:	2200      	movs	r2, #0
 8001458:	4952      	ldr	r1, [pc, #328]	@ (80015a4 <UART_RecieverExit_CallBack+0x180>)
 800145a:	4851      	ldr	r0, [pc, #324]	@ (80015a0 <UART_RecieverExit_CallBack+0x17c>)
 800145c:	f000 ff8e 	bl	800237c <MCAL_UART_ReceiveData>
 8001460:	4b4d      	ldr	r3, [pc, #308]	@ (8001598 <UART_RecieverExit_CallBack+0x174>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	b2db      	uxtb	r3, r3
 8001466:	3301      	adds	r3, #1
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4b4b      	ldr	r3, [pc, #300]	@ (8001598 <UART_RecieverExit_CallBack+0x174>)
 800146c:	701a      	strb	r2, [r3, #0]
 800146e:	e082      	b.n	8001576 <UART_RecieverExit_CallBack+0x152>
	else if(ExitCounter==2){
 8001470:	4b49      	ldr	r3, [pc, #292]	@ (8001598 <UART_RecieverExit_CallBack+0x174>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d10c      	bne.n	8001494 <UART_RecieverExit_CallBack+0x70>
		MCAL_UART_ReceiveData(RFID_Exit_USART, &temp_ExitCard[2], Disable);ExitCounter++;}
 800147a:	2200      	movs	r2, #0
 800147c:	494a      	ldr	r1, [pc, #296]	@ (80015a8 <UART_RecieverExit_CallBack+0x184>)
 800147e:	4848      	ldr	r0, [pc, #288]	@ (80015a0 <UART_RecieverExit_CallBack+0x17c>)
 8001480:	f000 ff7c 	bl	800237c <MCAL_UART_ReceiveData>
 8001484:	4b44      	ldr	r3, [pc, #272]	@ (8001598 <UART_RecieverExit_CallBack+0x174>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	3301      	adds	r3, #1
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4b42      	ldr	r3, [pc, #264]	@ (8001598 <UART_RecieverExit_CallBack+0x174>)
 8001490:	701a      	strb	r2, [r3, #0]
 8001492:	e070      	b.n	8001576 <UART_RecieverExit_CallBack+0x152>
	else if(ExitCounter==3){
 8001494:	4b40      	ldr	r3, [pc, #256]	@ (8001598 <UART_RecieverExit_CallBack+0x174>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b03      	cmp	r3, #3
 800149c:	d10c      	bne.n	80014b8 <UART_RecieverExit_CallBack+0x94>
		MCAL_UART_ReceiveData(RFID_Exit_USART, &temp_ExitCard[3], Disable);ExitCounter++;}
 800149e:	2200      	movs	r2, #0
 80014a0:	4942      	ldr	r1, [pc, #264]	@ (80015ac <UART_RecieverExit_CallBack+0x188>)
 80014a2:	483f      	ldr	r0, [pc, #252]	@ (80015a0 <UART_RecieverExit_CallBack+0x17c>)
 80014a4:	f000 ff6a 	bl	800237c <MCAL_UART_ReceiveData>
 80014a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001598 <UART_RecieverExit_CallBack+0x174>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	3301      	adds	r3, #1
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4b39      	ldr	r3, [pc, #228]	@ (8001598 <UART_RecieverExit_CallBack+0x174>)
 80014b4:	701a      	strb	r2, [r3, #0]
 80014b6:	e05e      	b.n	8001576 <UART_RecieverExit_CallBack+0x152>
	else if(ExitCounter==4){
 80014b8:	4b37      	ldr	r3, [pc, #220]	@ (8001598 <UART_RecieverExit_CallBack+0x174>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b04      	cmp	r3, #4
 80014c0:	d156      	bne.n	8001570 <UART_RecieverExit_CallBack+0x14c>
		temp_ExitCard[4] = '\0';
 80014c2:	4b36      	ldr	r3, [pc, #216]	@ (800159c <UART_RecieverExit_CallBack+0x178>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	711a      	strb	r2, [r3, #4]
		// To receive the enter in a dump variable
		MCAL_UART_ReceiveData(RFID_Exit_USART, &dump, Disable);
 80014c8:	2200      	movs	r2, #0
 80014ca:	4939      	ldr	r1, [pc, #228]	@ (80015b0 <UART_RecieverExit_CallBack+0x18c>)
 80014cc:	4834      	ldr	r0, [pc, #208]	@ (80015a0 <UART_RecieverExit_CallBack+0x17c>)
 80014ce:	f000 ff55 	bl	800237c <MCAL_UART_ReceiveData>
		ExitCounter=0;
 80014d2:	4b31      	ldr	r3, [pc, #196]	@ (8001598 <UART_RecieverExit_CallBack+0x174>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	701a      	strb	r2, [r3, #0]
		ExitReceived=1;
 80014d8:	4b36      	ldr	r3, [pc, #216]	@ (80015b4 <UART_RecieverExit_CallBack+0x190>)
 80014da:	2201      	movs	r2, #1
 80014dc:	701a      	strb	r2, [r3, #0]
		MCAL_UART_SendString(RFID_Exit_USART, "Your ID: ", Enable);
 80014de:	2201      	movs	r2, #1
 80014e0:	4935      	ldr	r1, [pc, #212]	@ (80015b8 <UART_RecieverExit_CallBack+0x194>)
 80014e2:	482f      	ldr	r0, [pc, #188]	@ (80015a0 <UART_RecieverExit_CallBack+0x17c>)
 80014e4:	f000 ff21 	bl	800232a <MCAL_UART_SendString>
		MCAL_UART_SendString(RFID_Exit_USART, temp_ExitCard, Enable);
 80014e8:	2201      	movs	r2, #1
 80014ea:	492c      	ldr	r1, [pc, #176]	@ (800159c <UART_RecieverExit_CallBack+0x178>)
 80014ec:	482c      	ldr	r0, [pc, #176]	@ (80015a0 <UART_RecieverExit_CallBack+0x17c>)
 80014ee:	f000 ff1c 	bl	800232a <MCAL_UART_SendString>
		if(CompareWithDataBase(temp_ExitCard,AllowedIDs)){
 80014f2:	4932      	ldr	r1, [pc, #200]	@ (80015bc <UART_RecieverExit_CallBack+0x198>)
 80014f4:	4829      	ldr	r0, [pc, #164]	@ (800159c <UART_RecieverExit_CallBack+0x178>)
 80014f6:	f7ff fe67 	bl	80011c8 <CompareWithDataBase>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d02b      	beq.n	8001558 <UART_RecieverExit_CallBack+0x134>
			if(availableSlots<3)
 8001500:	4b2f      	ldr	r3, [pc, #188]	@ (80015c0 <UART_RecieverExit_CallBack+0x19c>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d806      	bhi.n	8001518 <UART_RecieverExit_CallBack+0xf4>
				availableSlots++;
 800150a:	4b2d      	ldr	r3, [pc, #180]	@ (80015c0 <UART_RecieverExit_CallBack+0x19c>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	3301      	adds	r3, #1
 8001512:	b2da      	uxtb	r2, r3
 8001514:	4b2a      	ldr	r3, [pc, #168]	@ (80015c0 <UART_RecieverExit_CallBack+0x19c>)
 8001516:	701a      	strb	r2, [r3, #0]
			lcd_ES_tclear(USER_LCD);
 8001518:	2001      	movs	r0, #1
 800151a:	f7ff f83c 	bl	8000596 <lcd_ES_tclear>
			Lcd_ES_tsendString(USER_LCD, "Eligible ID");
 800151e:	4929      	ldr	r1, [pc, #164]	@ (80015c4 <UART_RecieverExit_CallBack+0x1a0>)
 8001520:	2001      	movs	r0, #1
 8001522:	f7ff fb31 	bl	8000b88 <Lcd_ES_tsendString>
			Servo_Move(Servo_Exit, UP);
 8001526:	2101      	movs	r1, #1
 8001528:	2001      	movs	r0, #1
 800152a:	f7ff fda1 	bl	8001070 <Servo_Move>
			PIR_Read(PIR_2, &PIR2_Reading);
 800152e:	4926      	ldr	r1, [pc, #152]	@ (80015c8 <UART_RecieverExit_CallBack+0x1a4>)
 8001530:	2002      	movs	r0, #2
 8001532:	f7ff fd3f 	bl	8000fb4 <PIR_Read>
			while(PIR2_Reading){
 8001536:	e006      	b.n	8001546 <UART_RecieverExit_CallBack+0x122>
				PIR_Read(PIR_2, &PIR2_Reading);
 8001538:	4923      	ldr	r1, [pc, #140]	@ (80015c8 <UART_RecieverExit_CallBack+0x1a4>)
 800153a:	2002      	movs	r0, #2
 800153c:	f7ff fd3a 	bl	8000fb4 <PIR_Read>
				Delay_ms(3);
 8001540:	2003      	movs	r0, #3
 8001542:	f000 fdc2 	bl	80020ca <Delay_ms>
			while(PIR2_Reading){
 8001546:	4b20      	ldr	r3, [pc, #128]	@ (80015c8 <UART_RecieverExit_CallBack+0x1a4>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f4      	bne.n	8001538 <UART_RecieverExit_CallBack+0x114>
			}
			Servo_Move(Servo_Exit, DOWN);
 800154e:	2100      	movs	r1, #0
 8001550:	2001      	movs	r0, #1
 8001552:	f7ff fd8d 	bl	8001070 <Servo_Move>
 8001556:	e006      	b.n	8001566 <UART_RecieverExit_CallBack+0x142>
		}else{
			lcd_ES_tclear(USER_LCD);
 8001558:	2001      	movs	r0, #1
 800155a:	f7ff f81c 	bl	8000596 <lcd_ES_tclear>
			Lcd_ES_tsendString(USER_LCD, "Unregistered ID");
 800155e:	491b      	ldr	r1, [pc, #108]	@ (80015cc <UART_RecieverExit_CallBack+0x1a8>)
 8001560:	2001      	movs	r0, #1
 8001562:	f7ff fb11 	bl	8000b88 <Lcd_ES_tsendString>
		}
		clearArray(temp_ExitCard,5);
 8001566:	2105      	movs	r1, #5
 8001568:	480c      	ldr	r0, [pc, #48]	@ (800159c <UART_RecieverExit_CallBack+0x178>)
 800156a:	f7ff fddf 	bl	800112c <clearArray>
 800156e:	e002      	b.n	8001576 <UART_RecieverExit_CallBack+0x152>
	}else{
		ExitCounter=0;
 8001570:	4b09      	ldr	r3, [pc, #36]	@ (8001598 <UART_RecieverExit_CallBack+0x174>)
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
	}
	gettingOption = 0;
 8001576:	4b16      	ldr	r3, [pc, #88]	@ (80015d0 <UART_RecieverExit_CallBack+0x1ac>)
 8001578:	2200      	movs	r2, #0
 800157a:	701a      	strb	r2, [r3, #0]
	userDisplayed = 0;
 800157c:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <UART_RecieverExit_CallBack+0x1b0>)
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
	adminDisplayed = 0;
 8001582:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <UART_RecieverExit_CallBack+0x1b4>)
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
	lcd_ES_tclear(USER_LCD);
 8001588:	2001      	movs	r0, #1
 800158a:	f7ff f804 	bl	8000596 <lcd_ES_tclear>
	currentState = ADMIN_OPTIONS;
 800158e:	4b13      	ldr	r3, [pc, #76]	@ (80015dc <UART_RecieverExit_CallBack+0x1b8>)
 8001590:	2201      	movs	r2, #1
 8001592:	701a      	strb	r2, [r3, #0]
}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}
 8001598:	2000003c 	.word	0x2000003c
 800159c:	20000048 	.word	0x20000048
 80015a0:	40004400 	.word	0x40004400
 80015a4:	20000049 	.word	0x20000049
 80015a8:	2000004a 	.word	0x2000004a
 80015ac:	2000004b 	.word	0x2000004b
 80015b0:	20000038 	.word	0x20000038
 80015b4:	2000003a 	.word	0x2000003a
 80015b8:	08002558 	.word	0x08002558
 80015bc:	20000024 	.word	0x20000024
 80015c0:	20000000 	.word	0x20000000
 80015c4:	08002564 	.word	0x08002564
 80015c8:	20000022 	.word	0x20000022
 80015cc:	08002570 	.word	0x08002570
 80015d0:	2000004f 	.word	0x2000004f
 80015d4:	20000050 	.word	0x20000050
 80015d8:	20000051 	.word	0x20000051
 80015dc:	2000004e 	.word	0x2000004e

080015e0 <clock_init>:




void clock_init()
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
	// Enable clock for GPIOA (bit 2)
	RCC_GPIOA_CLK_EN();
 80015e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001610 <clock_init+0x30>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	4a09      	ldr	r2, [pc, #36]	@ (8001610 <clock_init+0x30>)
 80015ea:	f043 0304 	orr.w	r3, r3, #4
 80015ee:	6193      	str	r3, [r2, #24]
	// Enable clock for GPIOB (bit 3)
	RCC_GPIOB_CLK_EN();
 80015f0:	4b07      	ldr	r3, [pc, #28]	@ (8001610 <clock_init+0x30>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	4a06      	ldr	r2, [pc, #24]	@ (8001610 <clock_init+0x30>)
 80015f6:	f043 0308 	orr.w	r3, r3, #8
 80015fa:	6193      	str	r3, [r2, #24]

	RCC_AFIO_CLK_EN();
 80015fc:	4b04      	ldr	r3, [pc, #16]	@ (8001610 <clock_init+0x30>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4a03      	ldr	r2, [pc, #12]	@ (8001610 <clock_init+0x30>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	6193      	str	r3, [r2, #24]
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr
 8001610:	40021000 	.word	0x40021000

08001614 <main>:


int main(void)
{
 8001614:	b590      	push	{r4, r7, lr}
 8001616:	b093      	sub	sp, #76	@ 0x4c
 8001618:	af00      	add	r7, sp, #0
	clock_init();
 800161a:	f7ff ffe1 	bl	80015e0 <clock_init>
	Lcd_ES_tInit(LCD_Instant_1);
 800161e:	2000      	movs	r0, #0
 8001620:	f7fe fec4 	bl	80003ac <Lcd_ES_tInit>
	lcd_ES_tclear(LCD_Instant_1);
 8001624:	2000      	movs	r0, #0
 8001626:	f7fe ffb6 	bl	8000596 <lcd_ES_tclear>
	Lcd_ES_tInit(LCD_Instant_2);
 800162a:	2001      	movs	r0, #1
 800162c:	f7fe febe 	bl	80003ac <Lcd_ES_tInit>
	lcd_ES_tclear(LCD_Instant_2);
 8001630:	2001      	movs	r0, #1
 8001632:	f7fe ffb0 	bl	8000596 <lcd_ES_tclear>
	KPD_init();
 8001636:	f7fe fda5 	bl	8000184 <KPD_init>
	PIR_Init();
 800163a:	f7ff fc9f 	bl	8000f7c <PIR_Init>
	LED_Init();
 800163e:	f7ff fc31 	bl	8000ea4 <LED_Init>
	TIMER2_Init();
 8001642:	f000 fd05 	bl	8002050 <TIMER2_Init>
	Servo_Init(Servo_Entry);
 8001646:	2000      	movs	r0, #0
 8001648:	f7ff fce4 	bl	8001014 <Servo_Init>
	Servo_Init(Servo_Exit);
 800164c:	2001      	movs	r0, #1
 800164e:	f7ff fce1 	bl	8001014 <Servo_Init>

	Servo_Move(Servo_Entry, DOWN);
 8001652:	2100      	movs	r1, #0
 8001654:	2000      	movs	r0, #0
 8001656:	f7ff fd0b 	bl	8001070 <Servo_Move>
	Servo_Move(Servo_Exit, DOWN);
 800165a:	2100      	movs	r1, #0
 800165c:	2001      	movs	r0, #1
 800165e:	f7ff fd07 	bl	8001070 <Servo_Move>
	// Both USARTs tested


	// Initialization of USART
	UART_Config UART_EntryCfg;
	UART_EntryCfg.BaudRate = UART_BaudRate_115200;
 8001662:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001666:	633b      	str	r3, [r7, #48]	@ 0x30
	UART_EntryCfg.HWFlowCtrl = UART_HWFlowCtrl_NONE;
 8001668:	2300      	movs	r3, #0
 800166a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	UART_EntryCfg.IRQ_Enable = UART_IRQ_Enable_RXNE;
 800166e:	2320      	movs	r3, #32
 8001670:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
	UART_EntryCfg.P_IRQ_CallBack = UART_RecieverEntry_CallBack;
 8001674:	4bcf      	ldr	r3, [pc, #828]	@ (80019b4 <main+0x3a0>)
 8001676:	63fb      	str	r3, [r7, #60]	@ 0x3c
	UART_EntryCfg.Parity = UART_Parity_NONE;
 8001678:	2300      	movs	r3, #0
 800167a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	UART_EntryCfg.Payload_length = UART_Payload_Length_8B;
 800167e:	2300      	movs	r3, #0
 8001680:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	UART_EntryCfg.StopBits = UART_StopBits_1;
 8001684:	2300      	movs	r3, #0
 8001686:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	UART_EntryCfg.USART_Mode = UART_Mode_Tx_Rx;
 800168a:	230c      	movs	r3, #12
 800168c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	MCAL_UART_Init(RFID_Entry_USART, &UART_EntryCfg);
 8001690:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001694:	4619      	mov	r1, r3
 8001696:	48c8      	ldr	r0, [pc, #800]	@ (80019b8 <main+0x3a4>)
 8001698:	f000 fd50 	bl	800213c <MCAL_UART_Init>
	MCAL_UART_GPIO_SetPins(RFID_Entry_USART);
 800169c:	48c6      	ldr	r0, [pc, #792]	@ (80019b8 <main+0x3a4>)
 800169e:	f000 fea5 	bl	80023ec <MCAL_UART_GPIO_SetPins>


	UART_Config UART_ExitCfg;
	UART_ExitCfg.BaudRate = UART_BaudRate_115200;
 80016a2:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80016a6:	61fb      	str	r3, [r7, #28]
	UART_ExitCfg.HWFlowCtrl = UART_HWFlowCtrl_NONE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	UART_ExitCfg.IRQ_Enable = UART_IRQ_Enable_RXNE;
 80016ae:	2320      	movs	r3, #32
 80016b0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	UART_ExitCfg.P_IRQ_CallBack = UART_RecieverExit_CallBack;
 80016b4:	4bc1      	ldr	r3, [pc, #772]	@ (80019bc <main+0x3a8>)
 80016b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	UART_ExitCfg.Parity = UART_Parity_NONE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	UART_ExitCfg.Payload_length = UART_Payload_Length_8B;
 80016be:	2300      	movs	r3, #0
 80016c0:	f887 3020 	strb.w	r3, [r7, #32]
	UART_ExitCfg.StopBits = UART_StopBits_1;
 80016c4:	2300      	movs	r3, #0
 80016c6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	UART_ExitCfg.USART_Mode = UART_Mode_Tx_Rx;
 80016ca:	230c      	movs	r3, #12
 80016cc:	763b      	strb	r3, [r7, #24]
	MCAL_UART_Init(RFID_Exit_USART, &UART_ExitCfg);
 80016ce:	f107 0318 	add.w	r3, r7, #24
 80016d2:	4619      	mov	r1, r3
 80016d4:	48ba      	ldr	r0, [pc, #744]	@ (80019c0 <main+0x3ac>)
 80016d6:	f000 fd31 	bl	800213c <MCAL_UART_Init>
	MCAL_UART_GPIO_SetPins(RFID_Exit_USART);
 80016da:	48b9      	ldr	r0, [pc, #740]	@ (80019c0 <main+0x3ac>)
 80016dc:	f000 fe86 	bl	80023ec <MCAL_UART_GPIO_SetPins>


	// Admin LCD
	Lcd_ES_tsendString(ADMIN_LCD, "Hello Admin");
 80016e0:	49b8      	ldr	r1, [pc, #736]	@ (80019c4 <main+0x3b0>)
 80016e2:	2000      	movs	r0, #0
 80016e4:	f7ff fa50 	bl	8000b88 <Lcd_ES_tsendString>
	LCD_ES_tGoTo(ADMIN_LCD, 1, 0);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2101      	movs	r1, #1
 80016ec:	2000      	movs	r0, #0
 80016ee:	f7ff fb4d 	bl	8000d8c <LCD_ES_tGoTo>
	Lcd_ES_tsendString(ADMIN_LCD, "Enter Password: ");
 80016f2:	49b5      	ldr	r1, [pc, #724]	@ (80019c8 <main+0x3b4>)
 80016f4:	2000      	movs	r0, #0
 80016f6:	f7ff fa47 	bl	8000b88 <Lcd_ES_tsendString>
	LCD_ES_tGoTo(ADMIN_LCD, 2, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2102      	movs	r1, #2
 80016fe:	2000      	movs	r0, #0
 8001700:	f7ff fb44 	bl	8000d8c <LCD_ES_tGoTo>


	lcd_ES_tclear(USER_LCD);
 8001704:	2001      	movs	r0, #1
 8001706:	f7fe ff46 	bl	8000596 <lcd_ES_tclear>
	LCD_ES_tGoTo(USER_LCD, 0, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2100      	movs	r1, #0
 800170e:	2001      	movs	r0, #1
 8001710:	f7ff fb3c 	bl	8000d8c <LCD_ES_tGoTo>
	Lcd_ES_tsendString(USER_LCD, "Welcome to our");
 8001714:	49ad      	ldr	r1, [pc, #692]	@ (80019cc <main+0x3b8>)
 8001716:	2001      	movs	r0, #1
 8001718:	f7ff fa36 	bl	8000b88 <Lcd_ES_tsendString>
	LCD_ES_tGoTo(USER_LCD, 1, 0);
 800171c:	2200      	movs	r2, #0
 800171e:	2101      	movs	r1, #1
 8001720:	2001      	movs	r0, #1
 8001722:	f7ff fb33 	bl	8000d8c <LCD_ES_tGoTo>
	Lcd_ES_tsendString(USER_LCD, "Parking :)");
 8001726:	49aa      	ldr	r1, [pc, #680]	@ (80019d0 <main+0x3bc>)
 8001728:	2001      	movs	r0, #1
 800172a:	f7ff fa2d 	bl	8000b88 <Lcd_ES_tsendString>
	LCD_ES_tGoTo(USER_LCD, 2, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2102      	movs	r1, #2
 8001732:	2001      	movs	r0, #1
 8001734:	f7ff fb2a 	bl	8000d8c <LCD_ES_tGoTo>
	Lcd_ES_tsendString(USER_LCD, "Empty Slots:");
 8001738:	49a6      	ldr	r1, [pc, #664]	@ (80019d4 <main+0x3c0>)
 800173a:	2001      	movs	r0, #1
 800173c:	f7ff fa24 	bl	8000b88 <Lcd_ES_tsendString>
	LCD_ES_tGoTo(USER_LCD, 3, 0);
 8001740:	2200      	movs	r2, #0
 8001742:	2103      	movs	r1, #3
 8001744:	2001      	movs	r0, #1
 8001746:	f7ff fb21 	bl	8000d8c <LCD_ES_tGoTo>
	Lcd_ES_tsendString(USER_LCD, "Pass your card");
 800174a:	49a3      	ldr	r1, [pc, #652]	@ (80019d8 <main+0x3c4>)
 800174c:	2001      	movs	r0, #1
 800174e:	f7ff fa1b 	bl	8000b88 <Lcd_ES_tsendString>
	LCD_ES_tGoTo(USER_LCD, 2, 14);
 8001752:	220e      	movs	r2, #14
 8001754:	2102      	movs	r1, #2
 8001756:	2001      	movs	r0, #1
 8001758:	f7ff fb18 	bl	8000d8c <LCD_ES_tGoTo>
	Lcd_ES_tdisplayNum(USER_LCD, availableSlots);
 800175c:	4b9f      	ldr	r3, [pc, #636]	@ (80019dc <main+0x3c8>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	4619      	mov	r1, r3
 8001764:	2001      	movs	r0, #1
 8001766:	f7ff fa59 	bl	8000c1c <Lcd_ES_tdisplayNum>

	// Try to send and receive strings using USART
	// Done using interrupts(CallBack functions above)


	uint8_t password[] = "1234";
 800176a:	4a9d      	ldr	r2, [pc, #628]	@ (80019e0 <main+0x3cc>)
 800176c:	f107 0310 	add.w	r3, r7, #16
 8001770:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001774:	6018      	str	r0, [r3, #0]
 8001776:	3304      	adds	r3, #4
 8001778:	7019      	strb	r1, [r3, #0]

	uint8_t enteredPassword[5] = {'\0'};
 800177a:	2300      	movs	r3, #0
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	2300      	movs	r3, #0
 8001780:	733b      	strb	r3, [r7, #12]
	uint8_t enteringIndex = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	uint8_t enteredOption = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	71fb      	strb	r3, [r7, #7]





	uint8_t DeleteIndex = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	71bb      	strb	r3, [r7, #6]
	uint8_t AddIndex = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	717b      	strb	r3, [r7, #5]

	uint8_t inputIndex = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46


	uint8_t PressedID_Digit = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	713b      	strb	r3, [r7, #4]

	uint8_t IDFlag = 0, IndexFlag = 0, DelteIndex = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80017a4:	2300      	movs	r3, #0
 80017a6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 80017aa:	2300      	movs	r3, #0
 80017ac:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	{




		switch(currentState){
 80017b0:	4b8c      	ldr	r3, [pc, #560]	@ (80019e4 <main+0x3d0>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b04      	cmp	r3, #4
 80017b6:	d8fb      	bhi.n	80017b0 <main+0x19c>
 80017b8:	a201      	add	r2, pc, #4	@ (adr r2, 80017c0 <main+0x1ac>)
 80017ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017be:	bf00      	nop
 80017c0:	080017d5 	.word	0x080017d5
 80017c4:	08001897 	.word	0x08001897
 80017c8:	08001bbd 	.word	0x08001bbd
 80017cc:	08001add 	.word	0x08001add
 80017d0:	08001b11 	.word	0x08001b11
		{


			//PIR_Read(PIR_2, &PIR2_Reading);
			// Make password four items
			KPD_ES_tGetKeyPressed(&KeyPressed);
 80017d4:	4884      	ldr	r0, [pc, #528]	@ (80019e8 <main+0x3d4>)
 80017d6:	f7fe fd3b 	bl	8000250 <KPD_ES_tGetKeyPressed>
			if(KeyPressed!=KPD_U8_NOT_PRESSED)
 80017da:	4b83      	ldr	r3, [pc, #524]	@ (80019e8 <main+0x3d4>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2bff      	cmp	r3, #255	@ 0xff
 80017e0:	f000 822f 	beq.w	8001c42 <main+0x62e>
			{
				LCD_ES_tGoTo(ADMIN_LCD, 2, enteringIndex+3);
 80017e4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80017e8:	3303      	adds	r3, #3
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	461a      	mov	r2, r3
 80017ee:	2102      	movs	r1, #2
 80017f0:	2000      	movs	r0, #0
 80017f2:	f7ff facb 	bl	8000d8c <LCD_ES_tGoTo>
				Lcd_ES_tsendChar(ADMIN_LCD, '*');
 80017f6:	212a      	movs	r1, #42	@ 0x2a
 80017f8:	2000      	movs	r0, #0
 80017fa:	f7ff f857 	bl	80008ac <Lcd_ES_tsendChar>
				enteredPassword[enteringIndex] = KeyPressed;
 80017fe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001802:	4a79      	ldr	r2, [pc, #484]	@ (80019e8 <main+0x3d4>)
 8001804:	7812      	ldrb	r2, [r2, #0]
 8001806:	3348      	adds	r3, #72	@ 0x48
 8001808:	443b      	add	r3, r7
 800180a:	f803 2c40 	strb.w	r2, [r3, #-64]
				enteringIndex++;
 800180e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001812:	3301      	adds	r3, #1
 8001814:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				if(enteringIndex>=4){
 8001818:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800181c:	2b03      	cmp	r3, #3
 800181e:	f240 8210 	bls.w	8001c42 <main+0x62e>
					// Comparing between two passwords
					if(strcmp(enteredPassword,password) == 0){
 8001822:	f107 0210 	add.w	r2, r7, #16
 8001826:	f107 0308 	add.w	r3, r7, #8
 800182a:	4611      	mov	r1, r2
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe fc9f 	bl	8000170 <strcmp>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d11e      	bne.n	8001876 <main+0x262>
						// Password is correct
						lcd_ES_tclear(ADMIN_LCD);
 8001838:	2000      	movs	r0, #0
 800183a:	f7fe feac 	bl	8000596 <lcd_ES_tclear>
						LCD_ES_tGoTo(ADMIN_LCD, 2, 0);
 800183e:	2200      	movs	r2, #0
 8001840:	2102      	movs	r1, #2
 8001842:	2000      	movs	r0, #0
 8001844:	f7ff faa2 	bl	8000d8c <LCD_ES_tGoTo>
						Lcd_ES_tsendString(ADMIN_LCD, "Correct Password");
 8001848:	4968      	ldr	r1, [pc, #416]	@ (80019ec <main+0x3d8>)
 800184a:	2000      	movs	r0, #0
 800184c:	f7ff f99c 	bl	8000b88 <Lcd_ES_tsendString>
						Delay_ms(100);
 8001850:	2064      	movs	r0, #100	@ 0x64
 8001852:	f000 fc3a 	bl	80020ca <Delay_ms>
						lcd_ES_tclear(ADMIN_LCD);
 8001856:	2000      	movs	r0, #0
 8001858:	f7fe fe9d 	bl	8000596 <lcd_ES_tclear>
						gettingOption = 0;
 800185c:	4b64      	ldr	r3, [pc, #400]	@ (80019f0 <main+0x3dc>)
 800185e:	2200      	movs	r2, #0
 8001860:	701a      	strb	r2, [r3, #0]
						userDisplayed = 0;
 8001862:	4b64      	ldr	r3, [pc, #400]	@ (80019f4 <main+0x3e0>)
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
						adminDisplayed = 0;
 8001868:	4b63      	ldr	r3, [pc, #396]	@ (80019f8 <main+0x3e4>)
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]
						currentState = ADMIN_OPTIONS;
 800186e:	4b5d      	ldr	r3, [pc, #372]	@ (80019e4 <main+0x3d0>)
 8001870:	2201      	movs	r2, #1
 8001872:	701a      	strb	r2, [r3, #0]
 8001874:	e00b      	b.n	800188e <main+0x27a>
					}else{
						// Password is wrong
						lcd_ES_tclear(ADMIN_LCD);
 8001876:	2000      	movs	r0, #0
 8001878:	f7fe fe8d 	bl	8000596 <lcd_ES_tclear>
						LCD_ES_tGoTo(ADMIN_LCD, 2, 0);
 800187c:	2200      	movs	r2, #0
 800187e:	2102      	movs	r1, #2
 8001880:	2000      	movs	r0, #0
 8001882:	f7ff fa83 	bl	8000d8c <LCD_ES_tGoTo>
						Lcd_ES_tsendString(ADMIN_LCD, "Wrong Password");
 8001886:	495d      	ldr	r1, [pc, #372]	@ (80019fc <main+0x3e8>)
 8001888:	2000      	movs	r0, #0
 800188a:	f7ff f97d 	bl	8000b88 <Lcd_ES_tsendString>
					}
					enteringIndex = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				}
			}
			break;
 8001894:	e1d5      	b.n	8001c42 <main+0x62e>
		}
		case ADMIN_OPTIONS:
		{
			// Ask the user for his desired action
			// 1- display id    2- delete id    3- add id      4- delete all Ids   (Each id is 4 digit)
			if(!userDisplayed){
 8001896:	4b57      	ldr	r3, [pc, #348]	@ (80019f4 <main+0x3e0>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d135      	bne.n	800190a <main+0x2f6>
				lcd_ES_tclear(USER_LCD);
 800189e:	2001      	movs	r0, #1
 80018a0:	f7fe fe79 	bl	8000596 <lcd_ES_tclear>
				LCD_ES_tGoTo(USER_LCD, 0, 0);
 80018a4:	2200      	movs	r2, #0
 80018a6:	2100      	movs	r1, #0
 80018a8:	2001      	movs	r0, #1
 80018aa:	f7ff fa6f 	bl	8000d8c <LCD_ES_tGoTo>
				Lcd_ES_tsendString(USER_LCD, "Welcome to our");
 80018ae:	4947      	ldr	r1, [pc, #284]	@ (80019cc <main+0x3b8>)
 80018b0:	2001      	movs	r0, #1
 80018b2:	f7ff f969 	bl	8000b88 <Lcd_ES_tsendString>
				LCD_ES_tGoTo(USER_LCD, 1, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2101      	movs	r1, #1
 80018ba:	2001      	movs	r0, #1
 80018bc:	f7ff fa66 	bl	8000d8c <LCD_ES_tGoTo>
				Lcd_ES_tsendString(USER_LCD, "Parking :)");
 80018c0:	4943      	ldr	r1, [pc, #268]	@ (80019d0 <main+0x3bc>)
 80018c2:	2001      	movs	r0, #1
 80018c4:	f7ff f960 	bl	8000b88 <Lcd_ES_tsendString>
				LCD_ES_tGoTo(USER_LCD, 2, 0);
 80018c8:	2200      	movs	r2, #0
 80018ca:	2102      	movs	r1, #2
 80018cc:	2001      	movs	r0, #1
 80018ce:	f7ff fa5d 	bl	8000d8c <LCD_ES_tGoTo>
				Lcd_ES_tsendString(USER_LCD, "Empty Slots:");
 80018d2:	4940      	ldr	r1, [pc, #256]	@ (80019d4 <main+0x3c0>)
 80018d4:	2001      	movs	r0, #1
 80018d6:	f7ff f957 	bl	8000b88 <Lcd_ES_tsendString>
				LCD_ES_tGoTo(USER_LCD, 3, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2103      	movs	r1, #3
 80018de:	2001      	movs	r0, #1
 80018e0:	f7ff fa54 	bl	8000d8c <LCD_ES_tGoTo>
				Lcd_ES_tsendString(USER_LCD, "Pass your card");
 80018e4:	493c      	ldr	r1, [pc, #240]	@ (80019d8 <main+0x3c4>)
 80018e6:	2001      	movs	r0, #1
 80018e8:	f7ff f94e 	bl	8000b88 <Lcd_ES_tsendString>
				LCD_ES_tGoTo(USER_LCD, 2, 14);
 80018ec:	220e      	movs	r2, #14
 80018ee:	2102      	movs	r1, #2
 80018f0:	2001      	movs	r0, #1
 80018f2:	f7ff fa4b 	bl	8000d8c <LCD_ES_tGoTo>
				Lcd_ES_tdisplayNum(USER_LCD, availableSlots);
 80018f6:	4b39      	ldr	r3, [pc, #228]	@ (80019dc <main+0x3c8>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	4619      	mov	r1, r3
 80018fe:	2001      	movs	r0, #1
 8001900:	f7ff f98c 	bl	8000c1c <Lcd_ES_tdisplayNum>
				userDisplayed = 1;
 8001904:	4b3b      	ldr	r3, [pc, #236]	@ (80019f4 <main+0x3e0>)
 8001906:	2201      	movs	r2, #1
 8001908:	701a      	strb	r2, [r3, #0]
			}


			IDFlag = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
			IndexFlag = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
			DelteIndex = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

			if(!adminDisplayed){
 800191c:	4b36      	ldr	r3, [pc, #216]	@ (80019f8 <main+0x3e4>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d126      	bne.n	8001972 <main+0x35e>
				LCD_ES_tGoTo(ADMIN_LCD, 0, 0);
 8001924:	2200      	movs	r2, #0
 8001926:	2100      	movs	r1, #0
 8001928:	2000      	movs	r0, #0
 800192a:	f7ff fa2f 	bl	8000d8c <LCD_ES_tGoTo>
				Lcd_ES_tsendString(ADMIN_LCD, "1- Display IDs");
 800192e:	4934      	ldr	r1, [pc, #208]	@ (8001a00 <main+0x3ec>)
 8001930:	2000      	movs	r0, #0
 8001932:	f7ff f929 	bl	8000b88 <Lcd_ES_tsendString>
				LCD_ES_tGoTo(ADMIN_LCD, 1, 0);
 8001936:	2200      	movs	r2, #0
 8001938:	2101      	movs	r1, #1
 800193a:	2000      	movs	r0, #0
 800193c:	f7ff fa26 	bl	8000d8c <LCD_ES_tGoTo>
				Lcd_ES_tsendString(ADMIN_LCD, "2- Delete ID");
 8001940:	4930      	ldr	r1, [pc, #192]	@ (8001a04 <main+0x3f0>)
 8001942:	2000      	movs	r0, #0
 8001944:	f7ff f920 	bl	8000b88 <Lcd_ES_tsendString>
				LCD_ES_tGoTo(ADMIN_LCD, 2, 0);
 8001948:	2200      	movs	r2, #0
 800194a:	2102      	movs	r1, #2
 800194c:	2000      	movs	r0, #0
 800194e:	f7ff fa1d 	bl	8000d8c <LCD_ES_tGoTo>
				Lcd_ES_tsendString(ADMIN_LCD, "3- Add ID");
 8001952:	492d      	ldr	r1, [pc, #180]	@ (8001a08 <main+0x3f4>)
 8001954:	2000      	movs	r0, #0
 8001956:	f7ff f917 	bl	8000b88 <Lcd_ES_tsendString>
				LCD_ES_tGoTo(ADMIN_LCD, 3, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	2103      	movs	r1, #3
 800195e:	2000      	movs	r0, #0
 8001960:	f7ff fa14 	bl	8000d8c <LCD_ES_tGoTo>
				Lcd_ES_tsendString(ADMIN_LCD, "4- Delete all");
 8001964:	4929      	ldr	r1, [pc, #164]	@ (8001a0c <main+0x3f8>)
 8001966:	2000      	movs	r0, #0
 8001968:	f7ff f90e 	bl	8000b88 <Lcd_ES_tsendString>
				adminDisplayed = 1;
 800196c:	4b22      	ldr	r3, [pc, #136]	@ (80019f8 <main+0x3e4>)
 800196e:	2201      	movs	r2, #1
 8001970:	701a      	strb	r2, [r3, #0]
			}


			if(!gettingOption){
 8001972:	4b1f      	ldr	r3, [pc, #124]	@ (80019f0 <main+0x3dc>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	f040 8165 	bne.w	8001c46 <main+0x632>
				// Getting option from user
				KPD_ES_tGetKeyPressed(&enteredOption);
 800197c:	1dfb      	adds	r3, r7, #7
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fc66 	bl	8000250 <KPD_ES_tGetKeyPressed>
				if(enteredOption!=KPD_U8_NOT_PRESSED){
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	2bff      	cmp	r3, #255	@ 0xff
 8001988:	f000 815d 	beq.w	8001c46 <main+0x632>
					gettingOption = 1;
 800198c:	4b18      	ldr	r3, [pc, #96]	@ (80019f0 <main+0x3dc>)
 800198e:	2201      	movs	r2, #1
 8001990:	701a      	strb	r2, [r3, #0]
					switch(enteredOption){
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	3b31      	subs	r3, #49	@ 0x31
 8001996:	2b03      	cmp	r3, #3
 8001998:	f200 808e 	bhi.w	8001ab8 <main+0x4a4>
 800199c:	a201      	add	r2, pc, #4	@ (adr r2, 80019a4 <main+0x390>)
 800199e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a2:	bf00      	nop
 80019a4:	08001a11 	.word	0x08001a11
 80019a8:	08001a39 	.word	0x08001a39
 80019ac:	08001a41 	.word	0x08001a41
 80019b0:	08001a49 	.word	0x08001a49
 80019b4:	08001245 	.word	0x08001245
 80019b8:	40013800 	.word	0x40013800
 80019bc:	08001425 	.word	0x08001425
 80019c0:	40004400 	.word	0x40004400
 80019c4:	08002580 	.word	0x08002580
 80019c8:	0800258c 	.word	0x0800258c
 80019cc:	080025a0 	.word	0x080025a0
 80019d0:	080025b0 	.word	0x080025b0
 80019d4:	080025bc 	.word	0x080025bc
 80019d8:	080025cc 	.word	0x080025cc
 80019dc:	20000000 	.word	0x20000000
 80019e0:	08002690 	.word	0x08002690
 80019e4:	2000004e 	.word	0x2000004e
 80019e8:	20000020 	.word	0x20000020
 80019ec:	080025dc 	.word	0x080025dc
 80019f0:	2000004f 	.word	0x2000004f
 80019f4:	20000050 	.word	0x20000050
 80019f8:	20000051 	.word	0x20000051
 80019fc:	080025f0 	.word	0x080025f0
 8001a00:	08002600 	.word	0x08002600
 8001a04:	08002610 	.word	0x08002610
 8001a08:	08002620 	.word	0x08002620
 8001a0c:	0800262c 	.word	0x0800262c
					case '1':  // Display IDs
					{
						lcd_ES_tclear(ADMIN_LCD);
 8001a10:	2000      	movs	r0, #0
 8001a12:	f7fe fdc0 	bl	8000596 <lcd_ES_tclear>
						ShowIDs(AllowedIDs,4);
 8001a16:	2104      	movs	r1, #4
 8001a18:	488c      	ldr	r0, [pc, #560]	@ (8001c4c <main+0x638>)
 8001a1a:	f7ff fba3 	bl	8001164 <ShowIDs>
						Delay_ms(50);
 8001a1e:	2032      	movs	r0, #50	@ 0x32
 8001a20:	f000 fb53 	bl	80020ca <Delay_ms>
						gettingOption = 0;
 8001a24:	4b8a      	ldr	r3, [pc, #552]	@ (8001c50 <main+0x63c>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
						userDisplayed = 0;
 8001a2a:	4b8a      	ldr	r3, [pc, #552]	@ (8001c54 <main+0x640>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
						adminDisplayed = 0;
 8001a30:	4b89      	ldr	r3, [pc, #548]	@ (8001c58 <main+0x644>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]
						break;
 8001a36:	e050      	b.n	8001ada <main+0x4c6>
					}
					case '2':   // Delete an ID
					{
						currentState = DELETE_ID;
 8001a38:	4b88      	ldr	r3, [pc, #544]	@ (8001c5c <main+0x648>)
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	701a      	strb	r2, [r3, #0]
						break;
 8001a3e:	e04c      	b.n	8001ada <main+0x4c6>
					}
					case '3':   // Choose the index he want to add to
					{
						currentState = ADD_ID_INDEX;
 8001a40:	4b86      	ldr	r3, [pc, #536]	@ (8001c5c <main+0x648>)
 8001a42:	2203      	movs	r2, #3
 8001a44:	701a      	strb	r2, [r3, #0]
						break;
 8001a46:	e048      	b.n	8001ada <main+0x4c6>
					}
					case '4':  // Delete All
					{
						lcd_ES_tclear(ADMIN_LCD);
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f7fe fda4 	bl	8000596 <lcd_ES_tclear>
						Lcd_ES_tsendString(ADMIN_LCD, "IDs deleted");
 8001a4e:	4984      	ldr	r1, [pc, #528]	@ (8001c60 <main+0x64c>)
 8001a50:	2000      	movs	r0, #0
 8001a52:	f7ff f899 	bl	8000b88 <Lcd_ES_tsendString>
						LCD_ES_tGoTo(ADMIN_LCD, 1, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2101      	movs	r1, #1
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f7ff f996 	bl	8000d8c <LCD_ES_tGoTo>
						Lcd_ES_tsendString(ADMIN_LCD, "Successfully");
 8001a60:	4980      	ldr	r1, [pc, #512]	@ (8001c64 <main+0x650>)
 8001a62:	2000      	movs	r0, #0
 8001a64:	f7ff f890 	bl	8000b88 <Lcd_ES_tsendString>
						Delay_ms(200);
 8001a68:	20c8      	movs	r0, #200	@ 0xc8
 8001a6a:	f000 fb2e 	bl	80020ca <Delay_ms>
						uint8_t j=0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
						for(j=0;j<4;j++){
 8001a74:	2300      	movs	r3, #0
 8001a76:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8001a7a:	e00f      	b.n	8001a9c <main+0x488>
							clearArray(AllowedIDs[j], 5);
 8001a7c:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	4a71      	ldr	r2, [pc, #452]	@ (8001c4c <main+0x638>)
 8001a88:	4413      	add	r3, r2
 8001a8a:	2105      	movs	r1, #5
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff fb4d 	bl	800112c <clearArray>
						for(j=0;j<4;j++){
 8001a92:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001a96:	3301      	adds	r3, #1
 8001a98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8001a9c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001aa0:	2b03      	cmp	r3, #3
 8001aa2:	d9eb      	bls.n	8001a7c <main+0x468>
						}
						gettingOption = 0;
 8001aa4:	4b6a      	ldr	r3, [pc, #424]	@ (8001c50 <main+0x63c>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
						userDisplayed = 0;
 8001aaa:	4b6a      	ldr	r3, [pc, #424]	@ (8001c54 <main+0x640>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	701a      	strb	r2, [r3, #0]
						adminDisplayed = 0;
 8001ab0:	4b69      	ldr	r3, [pc, #420]	@ (8001c58 <main+0x644>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	701a      	strb	r2, [r3, #0]
						break;
 8001ab6:	e010      	b.n	8001ada <main+0x4c6>
					}
					default:
					{
						lcd_ES_tclear(ADMIN_LCD);
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f7fe fd6c 	bl	8000596 <lcd_ES_tclear>
						Lcd_ES_tsendString(ADMIN_LCD, "Invalid Option");
 8001abe:	496a      	ldr	r1, [pc, #424]	@ (8001c68 <main+0x654>)
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f7ff f861 	bl	8000b88 <Lcd_ES_tsendString>
						gettingOption = 0;
 8001ac6:	4b62      	ldr	r3, [pc, #392]	@ (8001c50 <main+0x63c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
						userDisplayed = 0;
 8001acc:	4b61      	ldr	r3, [pc, #388]	@ (8001c54 <main+0x640>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
						adminDisplayed = 0;
 8001ad2:	4b61      	ldr	r3, [pc, #388]	@ (8001c58 <main+0x644>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
				}
			}



			break;
 8001ad8:	e0b5      	b.n	8001c46 <main+0x632>
 8001ada:	e0b4      	b.n	8001c46 <main+0x632>
		}
		case ADD_ID_INDEX:
		{
			lcd_ES_tclear(ADMIN_LCD);
 8001adc:	2000      	movs	r0, #0
 8001ade:	f7fe fd5a 	bl	8000596 <lcd_ES_tclear>
			Lcd_ES_tsendString(ADMIN_LCD, "Enter Index: ");
 8001ae2:	4962      	ldr	r1, [pc, #392]	@ (8001c6c <main+0x658>)
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	f7ff f84f 	bl	8000b88 <Lcd_ES_tsendString>
			while(!IndexFlag){
 8001aea:	e00c      	b.n	8001b06 <main+0x4f2>
				KPD_ES_tGetKeyPressed(&AddIndex);
 8001aec:	1d7b      	adds	r3, r7, #5
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe fbae 	bl	8000250 <KPD_ES_tGetKeyPressed>
				if(AddIndex!=KPD_U8_NOT_PRESSED){
 8001af4:	797b      	ldrb	r3, [r7, #5]
 8001af6:	2bff      	cmp	r3, #255	@ 0xff
 8001af8:	d005      	beq.n	8001b06 <main+0x4f2>
					// Getting the input from the ADMIN
					IndexFlag = 1;
 8001afa:	2301      	movs	r3, #1
 8001afc:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
					currentState = ADD_ID;
 8001b00:	4b56      	ldr	r3, [pc, #344]	@ (8001c5c <main+0x648>)
 8001b02:	2204      	movs	r2, #4
 8001b04:	701a      	strb	r2, [r3, #0]
			while(!IndexFlag){
 8001b06:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0ee      	beq.n	8001aec <main+0x4d8>
				}
			}
			break;
 8001b0e:	e09c      	b.n	8001c4a <main+0x636>



		case ADD_ID:
		{
			lcd_ES_tclear(ADMIN_LCD);
 8001b10:	2000      	movs	r0, #0
 8001b12:	f7fe fd40 	bl	8000596 <lcd_ES_tclear>
			Lcd_ES_tsendString(ADMIN_LCD, "Enter ID: ");
 8001b16:	4956      	ldr	r1, [pc, #344]	@ (8001c70 <main+0x65c>)
 8001b18:	2000      	movs	r0, #0
 8001b1a:	f7ff f835 	bl	8000b88 <Lcd_ES_tsendString>
			//Lcd_ES_tdisplayNum(ADMIN_LCD, inputIndex);
			while(!IDFlag){
 8001b1e:	e048      	b.n	8001bb2 <main+0x59e>
				KPD_ES_tGetKeyPressed(&PressedID_Digit);
 8001b20:	1d3b      	adds	r3, r7, #4
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fb94 	bl	8000250 <KPD_ES_tGetKeyPressed>
				if(PressedID_Digit!=KPD_U8_NOT_PRESSED){
 8001b28:	793b      	ldrb	r3, [r7, #4]
 8001b2a:	2bff      	cmp	r3, #255	@ 0xff
 8001b2c:	d041      	beq.n	8001bb2 <main+0x59e>
					AllowedIDs[AddIndex-'0'][inputIndex] = PressedID_Digit;
 8001b2e:	797b      	ldrb	r3, [r7, #5]
 8001b30:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001b34:	f897 1046 	ldrb.w	r1, [r7, #70]	@ 0x46
 8001b38:	793c      	ldrb	r4, [r7, #4]
 8001b3a:	4844      	ldr	r0, [pc, #272]	@ (8001c4c <main+0x638>)
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	4403      	add	r3, r0
 8001b44:	440b      	add	r3, r1
 8001b46:	4622      	mov	r2, r4
 8001b48:	701a      	strb	r2, [r3, #0]
					//inputID[inputIndex] = PressedID_Digit;
					Lcd_ES_tsendChar(ADMIN_LCD, PressedID_Digit);
 8001b4a:	793b      	ldrb	r3, [r7, #4]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	2000      	movs	r0, #0
 8001b50:	f7fe feac 	bl	80008ac <Lcd_ES_tsendChar>
					inputIndex++;
 8001b54:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001b58:	3301      	adds	r3, #1
 8001b5a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
					if(inputIndex>=4){
 8001b5e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	d925      	bls.n	8001bb2 <main+0x59e>
						lcd_ES_tclear(ADMIN_LCD);
 8001b66:	2000      	movs	r0, #0
 8001b68:	f7fe fd15 	bl	8000596 <lcd_ES_tclear>
						LCD_ES_tGoTo(ADMIN_LCD, 0, 0);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2100      	movs	r1, #0
 8001b70:	2000      	movs	r0, #0
 8001b72:	f7ff f90b 	bl	8000d8c <LCD_ES_tGoTo>
						Lcd_ES_tsendString(ADMIN_LCD, "Entered ID");
 8001b76:	493f      	ldr	r1, [pc, #252]	@ (8001c74 <main+0x660>)
 8001b78:	2000      	movs	r0, #0
 8001b7a:	f7ff f805 	bl	8000b88 <Lcd_ES_tsendString>
						LCD_ES_tGoTo(ADMIN_LCD, 1, 0);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2101      	movs	r1, #1
 8001b82:	2000      	movs	r0, #0
 8001b84:	f7ff f902 	bl	8000d8c <LCD_ES_tGoTo>
						//Lcd_ES_tsendString(ADMIN_LCD, AllowedIDs[AddIndex-'0']);
						inputIndex = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
						IDFlag = 1;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
						lcd_ES_tclear(ADMIN_LCD);
 8001b94:	2000      	movs	r0, #0
 8001b96:	f7fe fcfe 	bl	8000596 <lcd_ES_tclear>
						gettingOption = 0;
 8001b9a:	4b2d      	ldr	r3, [pc, #180]	@ (8001c50 <main+0x63c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]
						userDisplayed = 0;
 8001ba0:	4b2c      	ldr	r3, [pc, #176]	@ (8001c54 <main+0x640>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	701a      	strb	r2, [r3, #0]
						adminDisplayed = 0;
 8001ba6:	4b2c      	ldr	r3, [pc, #176]	@ (8001c58 <main+0x644>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	701a      	strb	r2, [r3, #0]
						currentState = ADMIN_OPTIONS;
 8001bac:	4b2b      	ldr	r3, [pc, #172]	@ (8001c5c <main+0x648>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	701a      	strb	r2, [r3, #0]
			while(!IDFlag){
 8001bb2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0b2      	beq.n	8001b20 <main+0x50c>
					}
				}
			}
			break;
 8001bba:	e046      	b.n	8001c4a <main+0x636>
		}


		case DELETE_ID:
		{
			lcd_ES_tclear(ADMIN_LCD);
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	f7fe fcea 	bl	8000596 <lcd_ES_tclear>
			Lcd_ES_tsendString(ADMIN_LCD, "Enter Index: ");
 8001bc2:	492a      	ldr	r1, [pc, #168]	@ (8001c6c <main+0x658>)
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	f7fe ffdf 	bl	8000b88 <Lcd_ES_tsendString>
			while(!DelteIndex){
 8001bca:	e035      	b.n	8001c38 <main+0x624>
				// Choose the index of the ID, he want to delete
				KPD_ES_tGetKeyPressed(&DeleteIndex);
 8001bcc:	1dbb      	adds	r3, r7, #6
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe fb3e 	bl	8000250 <KPD_ES_tGetKeyPressed>
				if(DeleteIndex!=KPD_U8_NOT_PRESSED){
 8001bd4:	79bb      	ldrb	r3, [r7, #6]
 8001bd6:	2bff      	cmp	r3, #255	@ 0xff
 8001bd8:	d02e      	beq.n	8001c38 <main+0x624>
					uint8_t i=0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
					for(i=0;i<4;i++){
 8001be0:	2300      	movs	r3, #0
 8001be2:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 8001be6:	e011      	b.n	8001c0c <main+0x5f8>
						AllowedIDs[DeleteIndex-'0'][i] = 0;
 8001be8:	79bb      	ldrb	r3, [r7, #6]
 8001bea:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001bee:	f897 1041 	ldrb.w	r1, [r7, #65]	@ 0x41
 8001bf2:	4816      	ldr	r0, [pc, #88]	@ (8001c4c <main+0x638>)
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	4403      	add	r3, r0
 8001bfc:	440b      	add	r3, r1
 8001bfe:	2200      	movs	r2, #0
 8001c00:	701a      	strb	r2, [r3, #0]
					for(i=0;i<4;i++){
 8001c02:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8001c06:	3301      	adds	r3, #1
 8001c08:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 8001c0c:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8001c10:	2b03      	cmp	r3, #3
 8001c12:	d9e9      	bls.n	8001be8 <main+0x5d4>
					}

					lcd_ES_tclear(ADMIN_LCD);
 8001c14:	2000      	movs	r0, #0
 8001c16:	f7fe fcbe 	bl	8000596 <lcd_ES_tclear>
					DelteIndex = 1;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
					gettingOption = 0;
 8001c20:	4b0b      	ldr	r3, [pc, #44]	@ (8001c50 <main+0x63c>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	701a      	strb	r2, [r3, #0]
					userDisplayed = 0;
 8001c26:	4b0b      	ldr	r3, [pc, #44]	@ (8001c54 <main+0x640>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
					adminDisplayed = 0;
 8001c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c58 <main+0x644>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	701a      	strb	r2, [r3, #0]
					currentState = ADMIN_OPTIONS;
 8001c32:	4b0a      	ldr	r3, [pc, #40]	@ (8001c5c <main+0x648>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	701a      	strb	r2, [r3, #0]
			while(!DelteIndex){
 8001c38:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0c5      	beq.n	8001bcc <main+0x5b8>
				}
			}
			break;
 8001c40:	e003      	b.n	8001c4a <main+0x636>
			break;
 8001c42:	bf00      	nop
 8001c44:	e5b4      	b.n	80017b0 <main+0x19c>
			break;
 8001c46:	bf00      	nop
 8001c48:	e5b2      	b.n	80017b0 <main+0x19c>
		switch(currentState){
 8001c4a:	e5b1      	b.n	80017b0 <main+0x19c>
 8001c4c:	20000024 	.word	0x20000024
 8001c50:	2000004f 	.word	0x2000004f
 8001c54:	20000050 	.word	0x20000050
 8001c58:	20000051 	.word	0x20000051
 8001c5c:	2000004e 	.word	0x2000004e
 8001c60:	0800263c 	.word	0x0800263c
 8001c64:	08002648 	.word	0x08002648
 8001c68:	08002658 	.word	0x08002658
 8001c6c:	08002668 	.word	0x08002668
 8001c70:	08002678 	.word	0x08002678
 8001c74:	08002684 	.word	0x08002684

08001c78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c78:	480d      	ldr	r0, [pc, #52]	@ (8001cb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c7a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001c7c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c80:	480c      	ldr	r0, [pc, #48]	@ (8001cb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c82:	490d      	ldr	r1, [pc, #52]	@ (8001cb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c84:	4a0d      	ldr	r2, [pc, #52]	@ (8001cbc <LoopForever+0xe>)
  movs r3, #0
 8001c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c88:	e002      	b.n	8001c90 <LoopCopyDataInit>

08001c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c8e:	3304      	adds	r3, #4

08001c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c94:	d3f9      	bcc.n	8001c8a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c96:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c98:	4c0a      	ldr	r4, [pc, #40]	@ (8001cc4 <LoopForever+0x16>)
  movs r3, #0
 8001c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c9c:	e001      	b.n	8001ca2 <LoopFillZerobss>

08001c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca0:	3204      	adds	r2, #4

08001ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca4:	d3fb      	bcc.n	8001c9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ca6:	f000 fc25 	bl	80024f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001caa:	f7ff fcb3 	bl	8001614 <main>

08001cae <LoopForever>:

LoopForever:
    b LoopForever
 8001cae:	e7fe      	b.n	8001cae <LoopForever>
  ldr   r0, =_estack
 8001cb0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001cbc:	080026d4 	.word	0x080026d4
  ldr r2, =_sbss
 8001cc0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001cc4:	20000090 	.word	0x20000090

08001cc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cc8:	e7fe      	b.n	8001cc8 <ADC1_2_IRQHandler>
	...

08001ccc <Get_CRLH_Position>:
#include "Stm32_F103C6_gpio_driver.h"



uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001cdc:	f000 80a5 	beq.w	8001e2a <Get_CRLH_Position+0x15e>
 8001ce0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ce4:	f300 80a3 	bgt.w	8001e2e <Get_CRLH_Position+0x162>
 8001ce8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001cec:	f000 809b 	beq.w	8001e26 <Get_CRLH_Position+0x15a>
 8001cf0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001cf4:	f300 809b 	bgt.w	8001e2e <Get_CRLH_Position+0x162>
 8001cf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001cfc:	f000 8091 	beq.w	8001e22 <Get_CRLH_Position+0x156>
 8001d00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d04:	f300 8093 	bgt.w	8001e2e <Get_CRLH_Position+0x162>
 8001d08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d0c:	f000 8087 	beq.w	8001e1e <Get_CRLH_Position+0x152>
 8001d10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d14:	f300 808b 	bgt.w	8001e2e <Get_CRLH_Position+0x162>
 8001d18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d1c:	d07d      	beq.n	8001e1a <Get_CRLH_Position+0x14e>
 8001d1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d22:	f300 8084 	bgt.w	8001e2e <Get_CRLH_Position+0x162>
 8001d26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d2a:	d074      	beq.n	8001e16 <Get_CRLH_Position+0x14a>
 8001d2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d30:	dc7d      	bgt.n	8001e2e <Get_CRLH_Position+0x162>
 8001d32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d36:	d06c      	beq.n	8001e12 <Get_CRLH_Position+0x146>
 8001d38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d3c:	dc77      	bgt.n	8001e2e <Get_CRLH_Position+0x162>
 8001d3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d42:	d064      	beq.n	8001e0e <Get_CRLH_Position+0x142>
 8001d44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d48:	dc71      	bgt.n	8001e2e <Get_CRLH_Position+0x162>
 8001d4a:	2b80      	cmp	r3, #128	@ 0x80
 8001d4c:	d05d      	beq.n	8001e0a <Get_CRLH_Position+0x13e>
 8001d4e:	2b80      	cmp	r3, #128	@ 0x80
 8001d50:	dc6d      	bgt.n	8001e2e <Get_CRLH_Position+0x162>
 8001d52:	2b20      	cmp	r3, #32
 8001d54:	dc48      	bgt.n	8001de8 <Get_CRLH_Position+0x11c>
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	dd69      	ble.n	8001e2e <Get_CRLH_Position+0x162>
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	2b1f      	cmp	r3, #31
 8001d5e:	d866      	bhi.n	8001e2e <Get_CRLH_Position+0x162>
 8001d60:	a201      	add	r2, pc, #4	@ (adr r2, 8001d68 <Get_CRLH_Position+0x9c>)
 8001d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d66:	bf00      	nop
 8001d68:	08001def 	.word	0x08001def
 8001d6c:	08001df3 	.word	0x08001df3
 8001d70:	08001e2f 	.word	0x08001e2f
 8001d74:	08001df7 	.word	0x08001df7
 8001d78:	08001e2f 	.word	0x08001e2f
 8001d7c:	08001e2f 	.word	0x08001e2f
 8001d80:	08001e2f 	.word	0x08001e2f
 8001d84:	08001dfb 	.word	0x08001dfb
 8001d88:	08001e2f 	.word	0x08001e2f
 8001d8c:	08001e2f 	.word	0x08001e2f
 8001d90:	08001e2f 	.word	0x08001e2f
 8001d94:	08001e2f 	.word	0x08001e2f
 8001d98:	08001e2f 	.word	0x08001e2f
 8001d9c:	08001e2f 	.word	0x08001e2f
 8001da0:	08001e2f 	.word	0x08001e2f
 8001da4:	08001dff 	.word	0x08001dff
 8001da8:	08001e2f 	.word	0x08001e2f
 8001dac:	08001e2f 	.word	0x08001e2f
 8001db0:	08001e2f 	.word	0x08001e2f
 8001db4:	08001e2f 	.word	0x08001e2f
 8001db8:	08001e2f 	.word	0x08001e2f
 8001dbc:	08001e2f 	.word	0x08001e2f
 8001dc0:	08001e2f 	.word	0x08001e2f
 8001dc4:	08001e2f 	.word	0x08001e2f
 8001dc8:	08001e2f 	.word	0x08001e2f
 8001dcc:	08001e2f 	.word	0x08001e2f
 8001dd0:	08001e2f 	.word	0x08001e2f
 8001dd4:	08001e2f 	.word	0x08001e2f
 8001dd8:	08001e2f 	.word	0x08001e2f
 8001ddc:	08001e2f 	.word	0x08001e2f
 8001de0:	08001e2f 	.word	0x08001e2f
 8001de4:	08001e03 	.word	0x08001e03
 8001de8:	2b40      	cmp	r3, #64	@ 0x40
 8001dea:	d00c      	beq.n	8001e06 <Get_CRLH_Position+0x13a>
 8001dec:	e01f      	b.n	8001e2e <Get_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	e01e      	b.n	8001e30 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 8001df2:	2304      	movs	r3, #4
 8001df4:	e01c      	b.n	8001e30 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 8001df6:	2308      	movs	r3, #8
 8001df8:	e01a      	b.n	8001e30 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 8001dfa:	230c      	movs	r3, #12
 8001dfc:	e018      	b.n	8001e30 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 8001dfe:	2310      	movs	r3, #16
 8001e00:	e016      	b.n	8001e30 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 8001e02:	2314      	movs	r3, #20
 8001e04:	e014      	b.n	8001e30 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 8001e06:	2318      	movs	r3, #24
 8001e08:	e012      	b.n	8001e30 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 8001e0a:	231c      	movs	r3, #28
 8001e0c:	e010      	b.n	8001e30 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_8:
		return 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	e00e      	b.n	8001e30 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 4;
 8001e12:	2304      	movs	r3, #4
 8001e14:	e00c      	b.n	8001e30 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 8001e16:	2308      	movs	r3, #8
 8001e18:	e00a      	b.n	8001e30 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 8001e1a:	230c      	movs	r3, #12
 8001e1c:	e008      	b.n	8001e30 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 8001e1e:	2310      	movs	r3, #16
 8001e20:	e006      	b.n	8001e30 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 8001e22:	2314      	movs	r3, #20
 8001e24:	e004      	b.n	8001e30 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 8001e26:	2318      	movs	r3, #24
 8001e28:	e002      	b.n	8001e30 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 8001e2a:	231c      	movs	r3, #28
 8001e2c:	e000      	b.n	8001e30 <Get_CRLH_Position+0x164>
		break;
	}
	return 0;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop

08001e3c <MCAL_GPIO_Init>:
 * 						  But LQFP48 has only GPIO A,B, part of C,D exported as external pins from the MCU
 */


void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 8001e3c:	b590      	push	{r4, r7, lr}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL) configures PIN 0 >> 7
	// Port configuration register high (GPIOx_CRH) configures PIN 8 >> 15

	volatile uint32_t* config_register = NULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	60bb      	str	r3, [r7, #8]
	uint8_t PINConfig = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	73fb      	strb	r3, [r7, #15]
	config_register = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	2bff      	cmp	r3, #255	@ 0xff
 8001e54:	d801      	bhi.n	8001e5a <MCAL_GPIO_Init+0x1e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	e001      	b.n	8001e5e <MCAL_GPIO_Init+0x22>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	60bb      	str	r3, [r7, #8]
	// Clear CNF[1:0] and MODE[1:0]
	(*config_register) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff ff31 	bl	8001ccc <Get_CRLH_Position>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	230f      	movs	r3, #15
 8001e70:	4093      	lsls	r3, r2
 8001e72:	43da      	mvns	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	401a      	ands	r2, r3
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	601a      	str	r2, [r3, #0]

	// If pin is output
	if(PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_PUSHPULL || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PUSHPULL)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	789b      	ldrb	r3, [r3, #2]
 8001e82:	2b07      	cmp	r3, #7
 8001e84:	d00b      	beq.n	8001e9e <MCAL_GPIO_Init+0x62>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	789b      	ldrb	r3, [r3, #2]
 8001e8a:	2b06      	cmp	r3, #6
 8001e8c:	d007      	beq.n	8001e9e <MCAL_GPIO_Init+0x62>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	789b      	ldrb	r3, [r3, #2]
 8001e92:	2b05      	cmp	r3, #5
 8001e94:	d003      	beq.n	8001e9e <MCAL_GPIO_Init+0x62>
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	789b      	ldrb	r3, [r3, #2]
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d10e      	bne.n	8001ebc <MCAL_GPIO_Init+0x80>
	{
		// Set CNF[1:0] and MODE[1:0]

		// From our header file comparing with TRM, << 2 because CNF has the upper 2 bits
		// & 0x0f because we need the first 4 bits only
		PINConfig = ((((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_OUTPUT_SPEED)) & 0x0f);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	789b      	ldrb	r3, [r3, #2]
 8001ea2:	3b04      	subs	r3, #4
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	b25a      	sxtb	r2, r3
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	78db      	ldrb	r3, [r3, #3]
 8001eac:	b25b      	sxtb	r3, r3
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	b25b      	sxtb	r3, r3
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	f003 030f 	and.w	r3, r3, #15
 8001eb8:	73fb      	strb	r3, [r7, #15]
 8001eba:	e02c      	b.n	8001f16 <MCAL_GPIO_Init+0xda>

	}
	// If pin is input (MODE = 00)
	else
	{
		if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOATING || PinConfig->GPIO_MODE == GPIO_MODE_Analog)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	789b      	ldrb	r3, [r3, #2]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d003      	beq.n	8001ecc <MCAL_GPIO_Init+0x90>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	789b      	ldrb	r3, [r3, #2]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d107      	bne.n	8001edc <MCAL_GPIO_Init+0xa0>
		{
			// Set CNF[1:0] and MODE = 00, also we don't need to subtract anything
			PINConfig = ((((PinConfig->GPIO_MODE) << 2) | 0x00) & 0x0f);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	789b      	ldrb	r3, [r3, #2]
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	f003 030f 	and.w	r3, r3, #15
 8001ed8:	73fb      	strb	r3, [r7, #15]
 8001eda:	e01c      	b.n	8001f16 <MCAL_GPIO_Init+0xda>
		}else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	789b      	ldrb	r3, [r3, #2]
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d102      	bne.n	8001eea <MCAL_GPIO_Init+0xae>
		{
			// It doesn't exist within the table of these configurations
			// We read from specs that it should be handled as input floating
			PINConfig = (((GPIO_MODE_INPUT_FLOATING << 2) | 0x00) & 0x0f);
 8001ee4:	2304      	movs	r3, #4
 8001ee6:	73fb      	strb	r3, [r7, #15]
 8001ee8:	e015      	b.n	8001f16 <MCAL_GPIO_Init+0xda>
		}else
		{
			// Dealing with Pull up and pull down
			PINConfig = (((GPIO_MODE_INPUT_PULLUP << 2) | 0x00) & 0x0f);
 8001eea:	2308      	movs	r3, #8
 8001eec:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PULLUP)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	789b      	ldrb	r3, [r3, #2]
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d107      	bne.n	8001f06 <MCAL_GPIO_Init+0xca>
			{
				// (Pull up) Table 20. Port bit configuration table, PxODR = 1
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;  // It is already shifted by its number (from our configuration)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	8812      	ldrh	r2, [r2, #0]
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	60da      	str	r2, [r3, #12]
 8001f04:	e007      	b.n	8001f16 <MCAL_GPIO_Init+0xda>
			}else
			{
				// (Pull down) Table 20. Port bit configuration table, PxODR = 0
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);  // It is already shifted by its number (from our configuration)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	8812      	ldrh	r2, [r2, #0]
 8001f0e:	43d2      	mvns	r2, r2
 8001f10:	401a      	ands	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	60da      	str	r2, [r3, #12]
			}
		}
	}

	// Finally, we just need to shift this variable with the position of the pin, and determine whether it is CRL or CRH
	(*config_register) |= (PINConfig << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8001f16:	7bfc      	ldrb	r4, [r7, #15]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fed5 	bl	8001ccc <Get_CRLH_Position>
 8001f22:	4603      	mov	r3, r0
 8001f24:	fa04 f203 	lsl.w	r2, r4, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	601a      	str	r2, [r3, #0]


}
 8001f32:	bf00      	nop
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd90      	pop	{r4, r7, pc}

08001f3a <MCAL_GPIO_ReadPin>:
 * Note					- None
 */


uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t PinNumber)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b085      	sub	sp, #20
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	460b      	mov	r3, r1
 8001f44:	807b      	strh	r3, [r7, #2]
	uint8_t bitStatus;
	if(((GPIOx->IDR) & PinNumber) != (uint32_t)GPIO_PIN_LOW)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	887b      	ldrh	r3, [r7, #2]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <MCAL_GPIO_ReadPin+0x1e>
	{
		bitStatus = GPIO_PIN_HIGH;
 8001f52:	2301      	movs	r3, #1
 8001f54:	73fb      	strb	r3, [r7, #15]
 8001f56:	e001      	b.n	8001f5c <MCAL_GPIO_ReadPin+0x22>
	}else
	{
		bitStatus = GPIO_PIN_LOW;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	73fb      	strb	r3, [r7, #15]
	}
	return bitStatus;
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr

08001f68 <MCAL_GPIO_WritePin>:
 * Note					- None
 */


void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint8_t Value)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	460b      	mov	r3, r1
 8001f72:	807b      	strh	r3, [r7, #2]
 8001f74:	4613      	mov	r3, r2
 8001f76:	707b      	strb	r3, [r7, #1]
	if(Value != (uint32_t)GPIO_PIN_LOW)
 8001f78:	787b      	ldrb	r3, [r7, #1]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <MCAL_GPIO_WritePin+0x1e>
		// Using BSRR (Port bit set/reset register) {doesnt't need |= sth)
//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber;
 8001f7e:	887a      	ldrh	r2, [r7, #2]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	611a      	str	r2, [r3, #16]
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber;
	}
}
 8001f84:	e002      	b.n	8001f8c <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 8001f86:	887a      	ldrh	r2, [r7, #2]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	615a      	str	r2, [r3, #20]
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr
	...

08001f98 <MCAL_RCC_GetSYSCLKFreq>:
//01: HSE oscillator used as system clock
//10: PLL used as system clock
//11: not applicable

uint32_t MCAL_RCC_GetSYSCLKFreq(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
	switch((RCC->CFGR >> 2) & 0b11)
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fcc <MCAL_RCC_GetSYSCLKFreq+0x34>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	089b      	lsrs	r3, r3, #2
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d00a      	beq.n	8001fc0 <MCAL_RCC_GetSYSCLKFreq+0x28>
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d80a      	bhi.n	8001fc4 <MCAL_RCC_GetSYSCLKFreq+0x2c>
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d002      	beq.n	8001fb8 <MCAL_RCC_GetSYSCLKFreq+0x20>
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d002      	beq.n	8001fbc <MCAL_RCC_GetSYSCLKFreq+0x24>
 8001fb6:	e005      	b.n	8001fc4 <MCAL_RCC_GetSYSCLKFreq+0x2c>
	{
	case 0:
		return HSI_RC_CLK;
 8001fb8:	4b05      	ldr	r3, [pc, #20]	@ (8001fd0 <MCAL_RCC_GetSYSCLKFreq+0x38>)
 8001fba:	e003      	b.n	8001fc4 <MCAL_RCC_GetSYSCLKFreq+0x2c>
		break;
	case 1:
		// To do
		return HSE_RC_CLK;
 8001fbc:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <MCAL_RCC_GetSYSCLKFreq+0x3c>)
 8001fbe:	e001      	b.n	8001fc4 <MCAL_RCC_GetSYSCLKFreq+0x2c>
		break;
	case 2:
		// To do
		return 16000000;
 8001fc0:	4b04      	ldr	r3, [pc, #16]	@ (8001fd4 <MCAL_RCC_GetSYSCLKFreq+0x3c>)
 8001fc2:	e7ff      	b.n	8001fc4 <MCAL_RCC_GetSYSCLKFreq+0x2c>
		break;
	}
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	007a1200 	.word	0x007a1200
 8001fd4:	00f42400 	.word	0x00f42400

08001fd8 <MCAL_RCC_GetHCLKFreq>:

uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE: AHB prescaler
	return ( MCAL_RCC_GetSYSCLKFreq() >> AHBPrescTable[((RCC->CFGR >> 4) & 0xF)] );
 8001fdc:	f7ff ffdc 	bl	8001f98 <MCAL_RCC_GetSYSCLKFreq>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	4b05      	ldr	r3, [pc, #20]	@ (8001ff8 <MCAL_RCC_GetHCLKFreq+0x20>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	091b      	lsrs	r3, r3, #4
 8001fe8:	f003 030f 	and.w	r3, r3, #15
 8001fec:	4903      	ldr	r1, [pc, #12]	@ (8001ffc <MCAL_RCC_GetHCLKFreq+0x24>)
 8001fee:	5ccb      	ldrb	r3, [r1, r3]
 8001ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	080026b4 	.word	0x080026b4

08002000 <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
	// Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	return ( MCAL_RCC_GetHCLKFreq() >> APBPrescTable[((RCC->CFGR >> 8) & 0b111)] );
 8002004:	f7ff ffe8 	bl	8001fd8 <MCAL_RCC_GetHCLKFreq>
 8002008:	4602      	mov	r2, r0
 800200a:	4b05      	ldr	r3, [pc, #20]	@ (8002020 <MCAL_RCC_GetPCLK1Freq+0x20>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	0a1b      	lsrs	r3, r3, #8
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	4903      	ldr	r1, [pc, #12]	@ (8002024 <MCAL_RCC_GetPCLK1Freq+0x24>)
 8002016:	5ccb      	ldrb	r3, [r1, r3]
 8002018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800201c:	4618      	mov	r0, r3
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40021000 	.word	0x40021000
 8002024:	080026ac 	.word	0x080026ac

08002028 <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
	// Bits 13:11 PPRE2: APB high-speed prescaler (APB2)
	return ( MCAL_RCC_GetHCLKFreq() >> APBPrescTable[((RCC->CFGR >> 11) & 0b111)] );
 800202c:	f7ff ffd4 	bl	8001fd8 <MCAL_RCC_GetHCLKFreq>
 8002030:	4602      	mov	r2, r0
 8002032:	4b05      	ldr	r3, [pc, #20]	@ (8002048 <MCAL_RCC_GetPCLK2Freq+0x20>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	0adb      	lsrs	r3, r3, #11
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	4903      	ldr	r1, [pc, #12]	@ (800204c <MCAL_RCC_GetPCLK2Freq+0x24>)
 800203e:	5ccb      	ldrb	r3, [r1, r3]
 8002040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002044:	4618      	mov	r0, r3
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40021000 	.word	0x40021000
 800204c:	080026ac 	.word	0x080026ac

08002050 <TIMER2_Init>:
#include "Stm32_F103C6_TIMER_driver.h"



void TIMER2_Init(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
	// Enable clock for timer2
	RCC_TIMER2_CLK_EN();
 8002054:	4b11      	ldr	r3, [pc, #68]	@ (800209c <TIMER2_Init+0x4c>)
 8002056:	69db      	ldr	r3, [r3, #28]
 8002058:	4a10      	ldr	r2, [pc, #64]	@ (800209c <TIMER2_Init+0x4c>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	61d3      	str	r3, [r2, #28]

	// Choose a prescalar (8MHz/(7+1)=1MHz clock)
	TIMER2->PSC = 7;
 8002060:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002064:	2207      	movs	r2, #7
 8002066:	629a      	str	r2, [r3, #40]	@ 0x28

	// Choose a value for auto reload register (we didn't use the maximum value because we doesn't have long delays)
	// Timer 2 will generate an interrupt every 50 milliseconds
	// The auto-reload register (ARR) is used for the purpose of resetting the timer counter back to 0 when it reaches the value specified in ARR.
	// This process is often referred to as "wrapping" or "overflowing."
	TIMER2->ARR = 0xC350;  // 50000*1us = 0.05s
 8002068:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800206c:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8002070:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Enable Timer2
	TIMER2->CR1 |= (1<<0);
 8002072:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	6013      	str	r3, [r2, #0]


	//Wait until the update flag (UIF) in the status register (SR) of TIM2 becomes 1.
	// This indicates that the timer
	// has finished counting to its ARR value and generated an interrupt.
	while(!((TIMER2->SR) & (1<<0)));
 8002082:	bf00      	nop
 8002084:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0f8      	beq.n	8002084 <TIMER2_Init+0x34>
}
 8002092:	bf00      	nop
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr
 800209c:	40021000 	.word	0x40021000

080020a0 <Delay_us>:




void Delay_us(int us)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
	TIMER2->CNT = 0;
 80020a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80020ac:	2200      	movs	r2, #0
 80020ae:	625a      	str	r2, [r3, #36]	@ 0x24
	while((TIMER2->CNT) < us);
 80020b0:	bf00      	nop
 80020b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80020b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d3f9      	bcc.n	80020b2 <Delay_us+0x12>
}
 80020be:	bf00      	nop
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr

080020ca <Delay_ms>:



void Delay_ms(int ms)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b084      	sub	sp, #16
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0;i<ms;i++)
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	e006      	b.n	80020e6 <Delay_ms+0x1c>
	{
		Delay_us(1000);
 80020d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020dc:	f7ff ffe0 	bl	80020a0 <Delay_us>
	for(i=0;i<ms;i++)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	3301      	adds	r3, #1
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	dbf4      	blt.n	80020d8 <Delay_ms+0xe>
	}
}
 80020ee:	bf00      	nop
 80020f0:	bf00      	nop
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <which_UART>:




static uint8_t which_UART(USART_Typedef * USARTx)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
	if(USARTx == USART1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a0b      	ldr	r2, [pc, #44]	@ (8002130 <which_UART+0x38>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d101      	bne.n	800210c <which_UART+0x14>
		return 0;
 8002108:	2300      	movs	r3, #0
 800210a:	e00c      	b.n	8002126 <which_UART+0x2e>
	else if(USARTx == USART2)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a09      	ldr	r2, [pc, #36]	@ (8002134 <which_UART+0x3c>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d101      	bne.n	8002118 <which_UART+0x20>
		return 1;
 8002114:	2301      	movs	r3, #1
 8002116:	e006      	b.n	8002126 <which_UART+0x2e>
	else if(USARTx == USART3)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a07      	ldr	r2, [pc, #28]	@ (8002138 <which_UART+0x40>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d101      	bne.n	8002124 <which_UART+0x2c>
		return 2;
 8002120:	2302      	movs	r3, #2
 8002122:	e000      	b.n	8002126 <which_UART+0x2e>
	return 3;
 8002124:	2303      	movs	r3, #3
}
 8002126:	4618      	mov	r0, r3
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr
 8002130:	40013800 	.word	0x40013800
 8002134:	40004400 	.word	0x40004400
 8002138:	40004800 	.word	0x40004800

0800213c <MCAL_UART_Init>:
 * @retval 				- None
 * Note					- The driver supports Asynchronous mode & HSI clock 8 Mhz
 */

void MCAL_UART_Init(USART_Typedef * USARTx, UART_Config* UARTCfg)
{
 800213c:	b5b0      	push	{r4, r5, r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]



	// 1- Enable clock for the given USART Peripheral

	if(USARTx == USART1){
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a61      	ldr	r2, [pc, #388]	@ (80022d0 <MCAL_UART_Init+0x194>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d10e      	bne.n	800216c <MCAL_UART_Init+0x30>
		Global_UART_Config[0] = *UARTCfg;
 800214e:	4a61      	ldr	r2, [pc, #388]	@ (80022d4 <MCAL_UART_Init+0x198>)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	4614      	mov	r4, r2
 8002154:	461d      	mov	r5, r3
 8002156:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002158:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800215a:	682b      	ldr	r3, [r5, #0]
 800215c:	6023      	str	r3, [r4, #0]
		RCC_USART1_CLK_EN();
 800215e:	4b5e      	ldr	r3, [pc, #376]	@ (80022d8 <MCAL_UART_Init+0x19c>)
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	4a5d      	ldr	r2, [pc, #372]	@ (80022d8 <MCAL_UART_Init+0x19c>)
 8002164:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002168:	6193      	str	r3, [r2, #24]
 800216a:	e026      	b.n	80021ba <MCAL_UART_Init+0x7e>
	}
	else if(USARTx == USART2){
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a5b      	ldr	r2, [pc, #364]	@ (80022dc <MCAL_UART_Init+0x1a0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d10f      	bne.n	8002194 <MCAL_UART_Init+0x58>
		Global_UART_Config[1] = *UARTCfg;
 8002174:	4b57      	ldr	r3, [pc, #348]	@ (80022d4 <MCAL_UART_Init+0x198>)
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	f103 0414 	add.w	r4, r3, #20
 800217c:	4615      	mov	r5, r2
 800217e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002180:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002182:	682b      	ldr	r3, [r5, #0]
 8002184:	6023      	str	r3, [r4, #0]
		RCC_USART2_CLK_EN();
 8002186:	4b54      	ldr	r3, [pc, #336]	@ (80022d8 <MCAL_UART_Init+0x19c>)
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	4a53      	ldr	r2, [pc, #332]	@ (80022d8 <MCAL_UART_Init+0x19c>)
 800218c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002190:	61d3      	str	r3, [r2, #28]
 8002192:	e012      	b.n	80021ba <MCAL_UART_Init+0x7e>
	}else if(USARTx == USART3){
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a52      	ldr	r2, [pc, #328]	@ (80022e0 <MCAL_UART_Init+0x1a4>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d10e      	bne.n	80021ba <MCAL_UART_Init+0x7e>
		Global_UART_Config[2] = *UARTCfg;
 800219c:	4b4d      	ldr	r3, [pc, #308]	@ (80022d4 <MCAL_UART_Init+0x198>)
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 80021a4:	4615      	mov	r5, r2
 80021a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021aa:	682b      	ldr	r3, [r5, #0]
 80021ac:	6023      	str	r3, [r4, #0]
		RCC_USART3_CLK_EN();
 80021ae:	4b4a      	ldr	r3, [pc, #296]	@ (80022d8 <MCAL_UART_Init+0x19c>)
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	4a49      	ldr	r2, [pc, #292]	@ (80022d8 <MCAL_UART_Init+0x19c>)
 80021b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021b8:	61d3      	str	r3, [r2, #28]
	}



	// 2- Enable the USART Module (Bit 13 UE: USART enable)
	USARTx->CR1 |= (1<<13);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	60da      	str	r2, [r3, #12]

	// 3- Enable the Tx/Rx according to the USART_Mode_Configuration item
	USARTx->CR1 |= UARTCfg->USART_Mode;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	7812      	ldrb	r2, [r2, #0]
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	60da      	str	r2, [r3, #12]

	// 4- Payload length CR1
	USARTx->CR1 |= UARTCfg->Payload_length;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	7a12      	ldrb	r2, [r2, #8]
 80021dc:	431a      	orrs	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	60da      	str	r2, [r3, #12]

	// Parity bits CR1
	USARTx->CR1 |= UARTCfg->Parity;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	7a52      	ldrb	r2, [r2, #9]
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	60da      	str	r2, [r3, #12]

	// Stop bits CR2
	USARTx->CR2 |= UARTCfg->StopBits;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	7a92      	ldrb	r2, [r2, #10]
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	611a      	str	r2, [r3, #16]

	// Flow control CR3
	USARTx->CR3 |= UARTCfg->HWFlowCtrl;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	7ad2      	ldrb	r2, [r2, #11]
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	615a      	str	r2, [r3, #20]

	// Configuration of Baud rate (BRR register)
	// PCLK1 for USART2,3
	// PCLK2 for USART1

	if(USARTx == USART1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a30      	ldr	r2, [pc, #192]	@ (80022d0 <MCAL_UART_Init+0x194>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d103      	bne.n	800221c <MCAL_UART_Init+0xe0>
	{
		Pclk = MCAL_RCC_GetPCLK2Freq();
 8002214:	f7ff ff08 	bl	8002028 <MCAL_RCC_GetPCLK2Freq>
 8002218:	60f8      	str	r0, [r7, #12]
 800221a:	e002      	b.n	8002222 <MCAL_UART_Init+0xe6>
	}else{
		Pclk = MCAL_RCC_GetPCLK1Freq();
 800221c:	f7ff fef0 	bl	8002000 <MCAL_RCC_GetPCLK1Freq>
 8002220:	60f8      	str	r0, [r7, #12]
	}

	BRR = UART_BRR_Register(Pclk,UARTCfg->BaudRate);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	011b      	lsls	r3, r3, #4
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	fbb2 f3f3 	udiv	r3, r2, r3
 800222e:	0119      	lsls	r1, r3, #4
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	009a      	lsls	r2, r3, #2
 800223a:	441a      	add	r2, r3
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	fbb2 f2f3 	udiv	r2, r2, r3
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002252:	2064      	movs	r0, #100	@ 0x64
 8002254:	fb00 f303 	mul.w	r3, r0, r3
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	4a21      	ldr	r2, [pc, #132]	@ (80022e4 <MCAL_UART_Init+0x1a8>)
 800225e:	fba2 2303 	umull	r2, r3, r2, r3
 8002262:	095b      	lsrs	r3, r3, #5
 8002264:	f003 030f 	and.w	r3, r3, #15
 8002268:	430b      	orrs	r3, r1
 800226a:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	609a      	str	r2, [r3, #8]


	// Enable / Disable Interrupts
	if(UARTCfg->IRQ_Enable != UART_IRQ_Enable_NONE)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	7b1b      	ldrb	r3, [r3, #12]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d026      	beq.n	80022c8 <MCAL_UART_Init+0x18c>
	{
		USARTx->CR1 |= (UARTCfg->IRQ_Enable);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	7b12      	ldrb	r2, [r2, #12]
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	60da      	str	r2, [r3, #12]

		// Enable NVIC for USARTx IRQ

		if(USARTx == USART1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a11      	ldr	r2, [pc, #68]	@ (80022d0 <MCAL_UART_Init+0x194>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d106      	bne.n	800229e <MCAL_UART_Init+0x162>
			NVIC_IRQ37_USART1_Enable;
 8002290:	4b15      	ldr	r3, [pc, #84]	@ (80022e8 <MCAL_UART_Init+0x1ac>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a14      	ldr	r2, [pc, #80]	@ (80022e8 <MCAL_UART_Init+0x1ac>)
 8002296:	f043 0320 	orr.w	r3, r3, #32
 800229a:	6013      	str	r3, [r2, #0]
		else if(USARTx == USART3)
			NVIC_IRQ39_USART3_Enable;

	}

}
 800229c:	e014      	b.n	80022c8 <MCAL_UART_Init+0x18c>
		else if(USARTx == USART2)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a0e      	ldr	r2, [pc, #56]	@ (80022dc <MCAL_UART_Init+0x1a0>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d106      	bne.n	80022b4 <MCAL_UART_Init+0x178>
			NVIC_IRQ38_USART2_Enable;
 80022a6:	4b10      	ldr	r3, [pc, #64]	@ (80022e8 <MCAL_UART_Init+0x1ac>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a0f      	ldr	r2, [pc, #60]	@ (80022e8 <MCAL_UART_Init+0x1ac>)
 80022ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022b0:	6013      	str	r3, [r2, #0]
}
 80022b2:	e009      	b.n	80022c8 <MCAL_UART_Init+0x18c>
		else if(USARTx == USART3)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a0a      	ldr	r2, [pc, #40]	@ (80022e0 <MCAL_UART_Init+0x1a4>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d105      	bne.n	80022c8 <MCAL_UART_Init+0x18c>
			NVIC_IRQ39_USART3_Enable;
 80022bc:	4b0a      	ldr	r3, [pc, #40]	@ (80022e8 <MCAL_UART_Init+0x1ac>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a09      	ldr	r2, [pc, #36]	@ (80022e8 <MCAL_UART_Init+0x1ac>)
 80022c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022c6:	6013      	str	r3, [r2, #0]
}
 80022c8:	bf00      	nop
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bdb0      	pop	{r4, r5, r7, pc}
 80022d0:	40013800 	.word	0x40013800
 80022d4:	20000054 	.word	0x20000054
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40004400 	.word	0x40004400
 80022e0:	40004800 	.word	0x40004800
 80022e4:	51eb851f 	.word	0x51eb851f
 80022e8:	e000e104 	.word	0xe000e104

080022ec <MCAL_UART_SendData>:




void MCAL_UART_SendData(USART_Typedef * USARTx, uint16_t* pTxBuffer, enum Polling_Mechanism PollingEn)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	4613      	mov	r3, r2
 80022f8:	71fb      	strb	r3, [r7, #7]
	// Wait until TXE flag is set (Empty)
	if(PollingEn == Enable){
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d106      	bne.n	800230e <MCAL_UART_SendData+0x22>
		while(!(USARTx->SR & 1<<7));
 8002300:	bf00      	nop
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0f9      	beq.n	8002302 <MCAL_UART_SendData+0x16>
	}

	uint8_t index = which_UART(USARTx);
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f7ff fef2 	bl	80020f8 <which_UART>
 8002314:	4603      	mov	r3, r0
 8002316:	75fb      	strb	r3, [r7, #23]
	if(Global_UART_Config[index].Payload_length == UART_Payload_Length_9B)
	{
		USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);
	}else
	{
		USARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	881b      	ldrh	r3, [r3, #0]
 800231c:	b2da      	uxtb	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	605a      	str	r2, [r3, #4]
	}
}
 8002322:	bf00      	nop
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <MCAL_UART_SendString>:




void MCAL_UART_SendString(USART_Typedef * USARTx, uint8_t* pTxBuffer, enum Polling_Mechanism PollingEn)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b086      	sub	sp, #24
 800232e:	af00      	add	r7, sp, #0
 8002330:	60f8      	str	r0, [r7, #12]
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	4613      	mov	r3, r2
 8002336:	71fb      	strb	r3, [r7, #7]
    uint16_t DefaultStop = '\r';
 8002338:	230d      	movs	r3, #13
 800233a:	82bb      	strh	r3, [r7, #20]

    uint8_t i = 0;
 800233c:	2300      	movs	r3, #0
 800233e:	75fb      	strb	r3, [r7, #23]
    while (pTxBuffer[i] != '\0')
 8002340:	e00a      	b.n	8002358 <MCAL_UART_SendString+0x2e>
    {
        MCAL_UART_SendData(USARTx, &(pTxBuffer[i]), PollingEn);
 8002342:	7dfb      	ldrb	r3, [r7, #23]
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	4413      	add	r3, r2
 8002348:	79fa      	ldrb	r2, [r7, #7]
 800234a:	4619      	mov	r1, r3
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f7ff ffcd 	bl	80022ec <MCAL_UART_SendData>
        i++;
 8002352:	7dfb      	ldrb	r3, [r7, #23]
 8002354:	3301      	adds	r3, #1
 8002356:	75fb      	strb	r3, [r7, #23]
    while (pTxBuffer[i] != '\0')
 8002358:	7dfb      	ldrb	r3, [r7, #23]
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	4413      	add	r3, r2
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1ee      	bne.n	8002342 <MCAL_UART_SendString+0x18>
    }
    MCAL_UART_SendData(USARTx, &DefaultStop, PollingEn);
 8002364:	79fa      	ldrb	r2, [r7, #7]
 8002366:	f107 0314 	add.w	r3, r7, #20
 800236a:	4619      	mov	r1, r3
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f7ff ffbd 	bl	80022ec <MCAL_UART_SendData>
}
 8002372:	bf00      	nop
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <MCAL_UART_ReceiveData>:
							When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.
 */


void MCAL_UART_ReceiveData(USART_Typedef * USARTx, uint16_t* pRxBuffer, enum Polling_Mechanism PollingEn)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	4613      	mov	r3, r2
 8002388:	71fb      	strb	r3, [r7, #7]
	// Wait until RXNE flag is set in the SR
	if(PollingEn == Enable){
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d106      	bne.n	800239e <MCAL_UART_ReceiveData+0x22>
		while(!(USARTx->SR & 1<<5));
 8002390:	bf00      	nop
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0320 	and.w	r3, r3, #32
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f9      	beq.n	8002392 <MCAL_UART_ReceiveData+0x16>
	}

	uint8_t index = which_UART(USARTx);
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f7ff feaa 	bl	80020f8 <which_UART>
 80023a4:	4603      	mov	r3, r0
 80023a6:	75fb      	strb	r3, [r7, #23]
			// MSB is parity not data (8 bits data, 1 parity)
			*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0xFF);
		}
	}else
	{    // 8 bits data
		if(Global_UART_Config[index].Parity == UART_Parity_NONE)
 80023a8:	7dfa      	ldrb	r2, [r7, #23]
 80023aa:	490f      	ldr	r1, [pc, #60]	@ (80023e8 <MCAL_UART_ReceiveData+0x6c>)
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	3309      	adds	r3, #9
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d107      	bne.n	80023ce <MCAL_UART_ReceiveData+0x52>
		{
			*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0xFF);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	801a      	strh	r2, [r3, #0]
		}


	}

}
 80023cc:	e007      	b.n	80023de <MCAL_UART_ReceiveData+0x62>
			*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0x7F);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80023d8:	b29a      	uxth	r2, r3
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	801a      	strh	r2, [r3, #0]
}
 80023de:	bf00      	nop
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000054 	.word	0x20000054

080023ec <MCAL_UART_GPIO_SetPins>:
 */



void MCAL_UART_GPIO_SetPins(USART_Typedef * USARTx)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;


	if(USARTx == USART1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a2b      	ldr	r2, [pc, #172]	@ (80024a4 <MCAL_UART_GPIO_SetPins+0xb8>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d118      	bne.n	800242e <MCAL_UART_GPIO_SetPins+0x42>
	{
		// PA9 --> Tx
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 80023fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002400:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 8002402:	2306      	movs	r3, #6
 8002404:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8002406:	2301      	movs	r3, #1
 8002408:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 800240a:	f107 030c 	add.w	r3, r7, #12
 800240e:	4619      	mov	r1, r3
 8002410:	4825      	ldr	r0, [pc, #148]	@ (80024a8 <MCAL_UART_GPIO_SetPins+0xbc>)
 8002412:	f7ff fd13 	bl	8001e3c <MCAL_GPIO_Init>


		// PA10 --> Rx
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8002416:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800241a:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 800241c:	2308      	movs	r3, #8
 800241e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8002420:	f107 030c 	add.w	r3, r7, #12
 8002424:	4619      	mov	r1, r3
 8002426:	4820      	ldr	r0, [pc, #128]	@ (80024a8 <MCAL_UART_GPIO_SetPins+0xbc>)
 8002428:	f7ff fd08 	bl	8001e3c <MCAL_GPIO_Init>
			PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
			MCAL_GPIO_Init(GPIOA, &PinCfg);
		}

	}
}
 800242c:	e036      	b.n	800249c <MCAL_UART_GPIO_SetPins+0xb0>
	else if(USARTx == USART2)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a1e      	ldr	r2, [pc, #120]	@ (80024ac <MCAL_UART_GPIO_SetPins+0xc0>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d116      	bne.n	8002464 <MCAL_UART_GPIO_SetPins+0x78>
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8002436:	2304      	movs	r3, #4
 8002438:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 800243a:	2306      	movs	r3, #6
 800243c:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 800243e:	2301      	movs	r3, #1
 8002440:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8002442:	f107 030c 	add.w	r3, r7, #12
 8002446:	4619      	mov	r1, r3
 8002448:	4817      	ldr	r0, [pc, #92]	@ (80024a8 <MCAL_UART_GPIO_SetPins+0xbc>)
 800244a:	f7ff fcf7 	bl	8001e3c <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 800244e:	2308      	movs	r3, #8
 8002450:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8002452:	2308      	movs	r3, #8
 8002454:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8002456:	f107 030c 	add.w	r3, r7, #12
 800245a:	4619      	mov	r1, r3
 800245c:	4812      	ldr	r0, [pc, #72]	@ (80024a8 <MCAL_UART_GPIO_SetPins+0xbc>)
 800245e:	f7ff fced 	bl	8001e3c <MCAL_GPIO_Init>
}
 8002462:	e01b      	b.n	800249c <MCAL_UART_GPIO_SetPins+0xb0>
	else if(USARTx == USART3)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a12      	ldr	r2, [pc, #72]	@ (80024b0 <MCAL_UART_GPIO_SetPins+0xc4>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d117      	bne.n	800249c <MCAL_UART_GPIO_SetPins+0xb0>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 800246c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002470:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 8002472:	2306      	movs	r3, #6
 8002474:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8002476:	2301      	movs	r3, #1
 8002478:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 800247a:	f107 030c 	add.w	r3, r7, #12
 800247e:	4619      	mov	r1, r3
 8002480:	480c      	ldr	r0, [pc, #48]	@ (80024b4 <MCAL_UART_GPIO_SetPins+0xc8>)
 8002482:	f7ff fcdb 	bl	8001e3c <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8002486:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800248a:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 800248c:	2308      	movs	r3, #8
 800248e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8002490:	f107 030c 	add.w	r3, r7, #12
 8002494:	4619      	mov	r1, r3
 8002496:	4807      	ldr	r0, [pc, #28]	@ (80024b4 <MCAL_UART_GPIO_SetPins+0xc8>)
 8002498:	f7ff fcd0 	bl	8001e3c <MCAL_GPIO_Init>
}
 800249c:	bf00      	nop
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40013800 	.word	0x40013800
 80024a8:	40010800 	.word	0x40010800
 80024ac:	40004400 	.word	0x40004400
 80024b0:	40004800 	.word	0x40004800
 80024b4:	40010c00 	.word	0x40010c00

080024b8 <USART1_IRQHandler>:


// ISR

void USART1_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
	Global_UART_Config[0].P_IRQ_CallBack();
 80024bc:	4b02      	ldr	r3, [pc, #8]	@ (80024c8 <USART1_IRQHandler+0x10>)
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	4798      	blx	r3
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000054 	.word	0x20000054

080024cc <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
	Global_UART_Config[1].P_IRQ_CallBack();
 80024d0:	4b02      	ldr	r3, [pc, #8]	@ (80024dc <USART2_IRQHandler+0x10>)
 80024d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d4:	4798      	blx	r3
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000054 	.word	0x20000054

080024e0 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
	Global_UART_Config[2].P_IRQ_CallBack();
 80024e4:	4b02      	ldr	r3, [pc, #8]	@ (80024f0 <USART3_IRQHandler+0x10>)
 80024e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024e8:	4798      	blx	r3
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000054 	.word	0x20000054

080024f4 <__libc_init_array>:
 80024f4:	b570      	push	{r4, r5, r6, lr}
 80024f6:	2600      	movs	r6, #0
 80024f8:	4d0c      	ldr	r5, [pc, #48]	@ (800252c <__libc_init_array+0x38>)
 80024fa:	4c0d      	ldr	r4, [pc, #52]	@ (8002530 <__libc_init_array+0x3c>)
 80024fc:	1b64      	subs	r4, r4, r5
 80024fe:	10a4      	asrs	r4, r4, #2
 8002500:	42a6      	cmp	r6, r4
 8002502:	d109      	bne.n	8002518 <__libc_init_array+0x24>
 8002504:	f000 f81a 	bl	800253c <_init>
 8002508:	2600      	movs	r6, #0
 800250a:	4d0a      	ldr	r5, [pc, #40]	@ (8002534 <__libc_init_array+0x40>)
 800250c:	4c0a      	ldr	r4, [pc, #40]	@ (8002538 <__libc_init_array+0x44>)
 800250e:	1b64      	subs	r4, r4, r5
 8002510:	10a4      	asrs	r4, r4, #2
 8002512:	42a6      	cmp	r6, r4
 8002514:	d105      	bne.n	8002522 <__libc_init_array+0x2e>
 8002516:	bd70      	pop	{r4, r5, r6, pc}
 8002518:	f855 3b04 	ldr.w	r3, [r5], #4
 800251c:	4798      	blx	r3
 800251e:	3601      	adds	r6, #1
 8002520:	e7ee      	b.n	8002500 <__libc_init_array+0xc>
 8002522:	f855 3b04 	ldr.w	r3, [r5], #4
 8002526:	4798      	blx	r3
 8002528:	3601      	adds	r6, #1
 800252a:	e7f2      	b.n	8002512 <__libc_init_array+0x1e>
 800252c:	080026cc 	.word	0x080026cc
 8002530:	080026cc 	.word	0x080026cc
 8002534:	080026cc 	.word	0x080026cc
 8002538:	080026d0 	.word	0x080026d0

0800253c <_init>:
 800253c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800253e:	bf00      	nop
 8002540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002542:	bc08      	pop	{r3}
 8002544:	469e      	mov	lr, r3
 8002546:	4770      	bx	lr

08002548 <_fini>:
 8002548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800254a:	bf00      	nop
 800254c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800254e:	bc08      	pop	{r3}
 8002550:	469e      	mov	lr, r3
 8002552:	4770      	bx	lr
